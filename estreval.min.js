var estreval = (() => {
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // node_modules/acorn/dist/acorn.js
  var require_acorn = __commonJS({
    "node_modules/acorn/dist/acorn.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.acorn = {}));
      })(exports, function(exports2) {
        "use strict";
        var reservedWords = {
          3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
          5: "class enum extends super const export import",
          6: "enum",
          strict: "implements interface let package private protected public static yield",
          strictBind: "eval arguments"
        };
        var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
        var keywords = {
          5: ecma5AndLessKeywords,
          "5module": ecma5AndLessKeywords + " export import",
          6: ecma5AndLessKeywords + " const class extends export import super"
        };
        var keywordRelationalOperator = /^in(stanceof)?$/;
        var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
        var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
        var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
        var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code, set) {
          var pos = 65536;
          for (var i = 0; i < set.length; i += 2) {
            pos += set[i];
            if (pos > code) {
              return false;
            }
            pos += set[i + 1];
            if (pos >= code) {
              return true;
            }
          }
        }
        function isIdentifierStart(code, astral) {
          if (code < 65) {
            return code === 36;
          }
          if (code < 91) {
            return true;
          }
          if (code < 97) {
            return code === 95;
          }
          if (code < 123) {
            return true;
          }
          if (code <= 65535) {
            return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
          }
          if (astral === false) {
            return false;
          }
          return isInAstralSet(code, astralIdentifierStartCodes);
        }
        function isIdentifierChar(code, astral) {
          if (code < 48) {
            return code === 36;
          }
          if (code < 58) {
            return true;
          }
          if (code < 65) {
            return false;
          }
          if (code < 91) {
            return true;
          }
          if (code < 97) {
            return code === 95;
          }
          if (code < 123) {
            return true;
          }
          if (code <= 65535) {
            return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
          }
          if (astral === false) {
            return false;
          }
          return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
        }
        var TokenType = function TokenType2(label, conf) {
          if (conf === void 0)
            conf = {};
          this.label = label;
          this.keyword = conf.keyword;
          this.beforeExpr = !!conf.beforeExpr;
          this.startsExpr = !!conf.startsExpr;
          this.isLoop = !!conf.isLoop;
          this.isAssign = !!conf.isAssign;
          this.prefix = !!conf.prefix;
          this.postfix = !!conf.postfix;
          this.binop = conf.binop || null;
          this.updateContext = null;
        };
        function binop(name, prec) {
          return new TokenType(name, { beforeExpr: true, binop: prec });
        }
        var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true };
        var keywords$1 = {};
        function kw(name, options) {
          if (options === void 0)
            options = {};
          options.keyword = name;
          return keywords$1[name] = new TokenType(name, options);
        }
        var types = {
          num: new TokenType("num", startsExpr),
          regexp: new TokenType("regexp", startsExpr),
          string: new TokenType("string", startsExpr),
          name: new TokenType("name", startsExpr),
          privateId: new TokenType("privateId", startsExpr),
          eof: new TokenType("eof"),
          bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
          bracketR: new TokenType("]"),
          braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
          braceR: new TokenType("}"),
          parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", beforeExpr),
          semi: new TokenType(";", beforeExpr),
          colon: new TokenType(":", beforeExpr),
          dot: new TokenType("."),
          question: new TokenType("?", beforeExpr),
          questionDot: new TokenType("?."),
          arrow: new TokenType("=>", beforeExpr),
          template: new TokenType("template"),
          invalidTemplate: new TokenType("invalidTemplate"),
          ellipsis: new TokenType("...", beforeExpr),
          backQuote: new TokenType("`", startsExpr),
          dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
          eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
          assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
          incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
          prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
          logicalOR: binop("||", 1),
          logicalAND: binop("&&", 2),
          bitwiseOR: binop("|", 3),
          bitwiseXOR: binop("^", 4),
          bitwiseAND: binop("&", 5),
          equality: binop("==/!=/===/!==", 6),
          relational: binop("</>/<=/>=", 7),
          bitShift: binop("<</>>/>>>", 8),
          plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
          modulo: binop("%", 10),
          star: binop("*", 10),
          slash: binop("/", 10),
          starstar: new TokenType("**", { beforeExpr: true }),
          coalesce: binop("??", 1),
          _break: kw("break"),
          _case: kw("case", beforeExpr),
          _catch: kw("catch"),
          _continue: kw("continue"),
          _debugger: kw("debugger"),
          _default: kw("default", beforeExpr),
          _do: kw("do", { isLoop: true, beforeExpr: true }),
          _else: kw("else", beforeExpr),
          _finally: kw("finally"),
          _for: kw("for", { isLoop: true }),
          _function: kw("function", startsExpr),
          _if: kw("if"),
          _return: kw("return", beforeExpr),
          _switch: kw("switch"),
          _throw: kw("throw", beforeExpr),
          _try: kw("try"),
          _var: kw("var"),
          _const: kw("const"),
          _while: kw("while", { isLoop: true }),
          _with: kw("with"),
          _new: kw("new", { beforeExpr: true, startsExpr: true }),
          _this: kw("this", startsExpr),
          _super: kw("super", startsExpr),
          _class: kw("class", startsExpr),
          _extends: kw("extends", beforeExpr),
          _export: kw("export"),
          _import: kw("import", startsExpr),
          _null: kw("null", startsExpr),
          _true: kw("true", startsExpr),
          _false: kw("false", startsExpr),
          _in: kw("in", { beforeExpr: true, binop: 7 }),
          _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
          _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
          _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
          _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
        };
        var lineBreak = /\r\n?|\n|\u2028|\u2029/;
        var lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code, ecma2019String) {
          return code === 10 || code === 13 || !ecma2019String && (code === 8232 || code === 8233);
        }
        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
        var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
        var ref = Object.prototype;
        var hasOwnProperty = ref.hasOwnProperty;
        var toString = ref.toString;
        function has(obj, propName) {
          return hasOwnProperty.call(obj, propName);
        }
        var isArray = Array.isArray || function(obj) {
          return toString.call(obj) === "[object Array]";
        };
        function wordsRegexp(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
        }
        var Position = function Position2(line, col) {
          this.line = line;
          this.column = col;
        };
        Position.prototype.offset = function offset(n) {
          return new Position(this.line, this.column + n);
        };
        var SourceLocation = function SourceLocation2(p, start, end) {
          this.start = start;
          this.end = end;
          if (p.sourceFile !== null) {
            this.source = p.sourceFile;
          }
        };
        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            lineBreakG.lastIndex = cur;
            var match = lineBreakG.exec(input);
            if (match && match.index < offset) {
              ++line;
              cur = match.index + match[0].length;
            } else {
              return new Position(line, offset - cur);
            }
          }
        }
        var defaultOptions = {
          ecmaVersion: null,
          sourceType: "script",
          onInsertedSemicolon: null,
          onTrailingComma: null,
          allowReserved: null,
          allowReturnOutsideFunction: false,
          allowImportExportEverywhere: false,
          allowAwaitOutsideFunction: null,
          allowSuperOutsideMethod: null,
          allowHashBang: false,
          locations: false,
          onToken: null,
          onComment: null,
          ranges: false,
          program: null,
          sourceFile: null,
          directSourceFile: null,
          preserveParens: false
        };
        var warnedAboutEcmaVersion = false;
        function getOptions(opts) {
          var options = {};
          for (var opt in defaultOptions) {
            options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
          }
          if (options.ecmaVersion === "latest") {
            options.ecmaVersion = 1e8;
          } else if (options.ecmaVersion == null) {
            if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
              warnedAboutEcmaVersion = true;
              console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
            }
            options.ecmaVersion = 11;
          } else if (options.ecmaVersion >= 2015) {
            options.ecmaVersion -= 2009;
          }
          if (options.allowReserved == null) {
            options.allowReserved = options.ecmaVersion < 5;
          }
          if (options.allowAwaitOutsideFunction == null) {
            options.allowAwaitOutsideFunction = options.ecmaVersion >= 13;
          }
          if (isArray(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function(token) {
              return tokens.push(token);
            };
          }
          if (isArray(options.onComment)) {
            options.onComment = pushComment(options, options.onComment);
          }
          return options;
        }
        function pushComment(options, array) {
          return function(block, text, start, end, startLoc, endLoc) {
            var comment = {
              type: block ? "Block" : "Line",
              value: text,
              start,
              end
            };
            if (options.locations) {
              comment.loc = new SourceLocation(this, startLoc, endLoc);
            }
            if (options.ranges) {
              comment.range = [start, end];
            }
            array.push(comment);
          };
        }
        var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128;
        function functionFlags(async, generator) {
          return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
        }
        var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5;
        var Parser = function Parser2(options, input, startPos) {
          this.options = options = getOptions(options);
          this.sourceFile = options.sourceFile;
          this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
          var reserved = "";
          if (options.allowReserved !== true) {
            reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
            if (options.sourceType === "module") {
              reserved += " await";
            }
          }
          this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict);
          this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
          this.input = String(input);
          this.containsEsc = false;
          if (startPos) {
            this.pos = startPos;
            this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
          } else {
            this.pos = this.lineStart = 0;
            this.curLine = 1;
          }
          this.type = types.eof;
          this.value = null;
          this.start = this.end = this.pos;
          this.startLoc = this.endLoc = this.curPosition();
          this.lastTokEndLoc = this.lastTokStartLoc = null;
          this.lastTokStart = this.lastTokEnd = this.pos;
          this.context = this.initialContext();
          this.exprAllowed = true;
          this.inModule = options.sourceType === "module";
          this.strict = this.inModule || this.strictDirective(this.pos);
          this.potentialArrowAt = -1;
          this.potentialArrowInForAwait = false;
          this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
          this.labels = [];
          this.undefinedExports = Object.create(null);
          if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
            this.skipLineComment(2);
          }
          this.scopeStack = [];
          this.enterScope(SCOPE_TOP);
          this.regexpState = null;
          this.privateNameStack = [];
        };
        var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, inNonArrowFunction: { configurable: true } };
        Parser.prototype.parse = function parse2() {
          var node = this.options.program || this.startNode();
          this.nextToken();
          return this.parseTopLevel(node);
        };
        prototypeAccessors.inFunction.get = function() {
          return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
        };
        prototypeAccessors.inGenerator.get = function() {
          return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
        };
        prototypeAccessors.inAsync.get = function() {
          return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
        };
        prototypeAccessors.allowSuper.get = function() {
          var ref2 = this.currentThisScope();
          var flags = ref2.flags;
          var inClassFieldInit = ref2.inClassFieldInit;
          return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
        };
        prototypeAccessors.allowDirectSuper.get = function() {
          return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
        };
        prototypeAccessors.treatFunctionsAsVar.get = function() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        };
        prototypeAccessors.inNonArrowFunction.get = function() {
          var ref2 = this.currentThisScope();
          var flags = ref2.flags;
          var inClassFieldInit = ref2.inClassFieldInit;
          return (flags & SCOPE_FUNCTION) > 0 || inClassFieldInit;
        };
        Parser.extend = function extend() {
          var plugins = [], len = arguments.length;
          while (len--)
            plugins[len] = arguments[len];
          var cls = this;
          for (var i = 0; i < plugins.length; i++) {
            cls = plugins[i](cls);
          }
          return cls;
        };
        Parser.parse = function parse2(input, options) {
          return new this(options, input).parse();
        };
        Parser.parseExpressionAt = function parseExpressionAt2(input, pos, options) {
          var parser = new this(options, input, pos);
          parser.nextToken();
          return parser.parseExpression();
        };
        Parser.tokenizer = function tokenizer2(input, options) {
          return new this(options, input);
        };
        Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp = Parser.prototype;
        var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
        pp.strictDirective = function(start) {
          for (; ; ) {
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));
            if (!match) {
              return false;
            }
            if ((match[1] || match[2]) === "use strict") {
              skipWhiteSpace.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
              var next = this.input.charAt(end);
              return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
            }
            start += match[0].length;
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;
            if (this.input[start] === ";") {
              start++;
            }
          }
        };
        pp.eat = function(type) {
          if (this.type === type) {
            this.next();
            return true;
          } else {
            return false;
          }
        };
        pp.isContextual = function(name) {
          return this.type === types.name && this.value === name && !this.containsEsc;
        };
        pp.eatContextual = function(name) {
          if (!this.isContextual(name)) {
            return false;
          }
          this.next();
          return true;
        };
        pp.expectContextual = function(name) {
          if (!this.eatContextual(name)) {
            this.unexpected();
          }
        };
        pp.canInsertSemicolon = function() {
          return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };
        pp.insertSemicolon = function() {
          if (this.canInsertSemicolon()) {
            if (this.options.onInsertedSemicolon) {
              this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
            }
            return true;
          }
        };
        pp.semicolon = function() {
          if (!this.eat(types.semi) && !this.insertSemicolon()) {
            this.unexpected();
          }
        };
        pp.afterTrailingComma = function(tokType, notNext) {
          if (this.type === tokType) {
            if (this.options.onTrailingComma) {
              this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
            }
            if (!notNext) {
              this.next();
            }
            return true;
          }
        };
        pp.expect = function(type) {
          this.eat(type) || this.unexpected();
        };
        pp.unexpected = function(pos) {
          this.raise(pos != null ? pos : this.start, "Unexpected token");
        };
        function DestructuringErrors() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        }
        pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
          if (!refDestructuringErrors) {
            return;
          }
          if (refDestructuringErrors.trailingComma > -1) {
            this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
          }
          var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
          if (parens > -1) {
            this.raiseRecoverable(parens, "Parenthesized pattern");
          }
        };
        pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) {
            return false;
          }
          var shorthandAssign = refDestructuringErrors.shorthandAssign;
          var doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow) {
            return shorthandAssign >= 0 || doubleProto >= 0;
          }
          if (shorthandAssign >= 0) {
            this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
          }
          if (doubleProto >= 0) {
            this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
          }
        };
        pp.checkYieldAwaitInDefaultParams = function() {
          if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
            this.raise(this.yieldPos, "Yield expression cannot be a default value");
          }
          if (this.awaitPos) {
            this.raise(this.awaitPos, "Await expression cannot be a default value");
          }
        };
        pp.isSimpleAssignTarget = function(expr) {
          if (expr.type === "ParenthesizedExpression") {
            return this.isSimpleAssignTarget(expr.expression);
          }
          return expr.type === "Identifier" || expr.type === "MemberExpression";
        };
        var pp$1 = Parser.prototype;
        pp$1.parseTopLevel = function(node) {
          var exports3 = Object.create(null);
          if (!node.body) {
            node.body = [];
          }
          while (this.type !== types.eof) {
            var stmt = this.parseStatement(null, true, exports3);
            node.body.push(stmt);
          }
          if (this.inModule) {
            for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
              var name = list[i];
              this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
            }
          }
          this.adaptDirectivePrologue(node.body);
          this.next();
          node.sourceType = this.options.sourceType;
          return this.finishNode(node, "Program");
        };
        var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
        pp$1.isLet = function(context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
            return false;
          }
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (nextCh === 91 || nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
            return true;
          }
          if (context) {
            return false;
          }
          if (nextCh === 123) {
            return true;
          }
          if (isIdentifierStart(nextCh, true)) {
            var pos = next + 1;
            while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) {
              ++pos;
            }
            if (nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
              return true;
            }
            var ident = this.input.slice(next, pos);
            if (!keywordRelationalOperator.test(ident)) {
              return true;
            }
          }
          return false;
        };
        pp$1.isAsyncFunction = function() {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
            return false;
          }
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length, after;
          return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
        };
        pp$1.parseStatement = function(context, topLevel, exports3) {
          var starttype = this.type, node = this.startNode(), kind;
          if (this.isLet(context)) {
            starttype = types._var;
            kind = "let";
          }
          switch (starttype) {
            case types._break:
            case types._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);
            case types._debugger:
              return this.parseDebuggerStatement(node);
            case types._do:
              return this.parseDoStatement(node);
            case types._for:
              return this.parseForStatement(node);
            case types._function:
              if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
                this.unexpected();
              }
              return this.parseFunctionStatement(node, false, !context);
            case types._class:
              if (context) {
                this.unexpected();
              }
              return this.parseClass(node, true);
            case types._if:
              return this.parseIfStatement(node);
            case types._return:
              return this.parseReturnStatement(node);
            case types._switch:
              return this.parseSwitchStatement(node);
            case types._throw:
              return this.parseThrowStatement(node);
            case types._try:
              return this.parseTryStatement(node);
            case types._const:
            case types._var:
              kind = kind || this.value;
              if (context && kind !== "var") {
                this.unexpected();
              }
              return this.parseVarStatement(node, kind);
            case types._while:
              return this.parseWhileStatement(node);
            case types._with:
              return this.parseWithStatement(node);
            case types.braceL:
              return this.parseBlock(true, node);
            case types.semi:
              return this.parseEmptyStatement(node);
            case types._export:
            case types._import:
              if (this.options.ecmaVersion > 10 && starttype === types._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input);
                var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (nextCh === 40 || nextCh === 46) {
                  return this.parseExpressionStatement(node, this.parseExpression());
                }
              }
              if (!this.options.allowImportExportEverywhere) {
                if (!topLevel) {
                  this.raise(this.start, "'import' and 'export' may only appear at the top level");
                }
                if (!this.inModule) {
                  this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
                }
              }
              return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports3);
            default:
              if (this.isAsyncFunction()) {
                if (context) {
                  this.unexpected();
                }
                this.next();
                return this.parseFunctionStatement(node, true, !context);
              }
              var maybeName = this.value, expr = this.parseExpression();
              if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
                return this.parseLabeledStatement(node, maybeName, expr, context);
              } else {
                return this.parseExpressionStatement(node, expr);
              }
          }
        };
        pp$1.parseBreakContinueStatement = function(node, keyword) {
          var isBreak = keyword === "break";
          this.next();
          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.label = null;
          } else if (this.type !== types.name) {
            this.unexpected();
          } else {
            node.label = this.parseIdent();
            this.semicolon();
          }
          var i = 0;
          for (; i < this.labels.length; ++i) {
            var lab = this.labels[i];
            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === "loop")) {
                break;
              }
              if (node.label && isBreak) {
                break;
              }
            }
          }
          if (i === this.labels.length) {
            this.raise(node.start, "Unsyntactic " + keyword);
          }
          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        };
        pp$1.parseDebuggerStatement = function(node) {
          this.next();
          this.semicolon();
          return this.finishNode(node, "DebuggerStatement");
        };
        pp$1.parseDoStatement = function(node) {
          this.next();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("do");
          this.labels.pop();
          this.expect(types._while);
          node.test = this.parseParenExpression();
          if (this.options.ecmaVersion >= 6) {
            this.eat(types.semi);
          } else {
            this.semicolon();
          }
          return this.finishNode(node, "DoWhileStatement");
        };
        pp$1.parseForStatement = function(node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
          this.labels.push(loopLabel);
          this.enterScope(0);
          this.expect(types.parenL);
          if (this.type === types.semi) {
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }
            return this.parseFor(node, null);
          }
          var isLet = this.isLet();
          if (this.type === types._var || this.type === types._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
            this.next();
            this.parseVar(init$1, true, kind);
            this.finishNode(init$1, "VariableDeclaration");
            if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
              if (this.options.ecmaVersion >= 9) {
                if (this.type === types._in) {
                  if (awaitAt > -1) {
                    this.unexpected(awaitAt);
                  }
                } else {
                  node.await = awaitAt > -1;
                }
              }
              return this.parseForIn(node, init$1);
            }
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }
            return this.parseFor(node, init$1);
          }
          var refDestructuringErrors = new DestructuringErrors();
          var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);
          if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node.await = awaitAt > -1;
              }
            }
            this.toAssignable(init, false, refDestructuringErrors);
            this.checkLValPattern(init);
            return this.parseForIn(node, init);
          } else {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init);
        };
        pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {
          this.next();
          return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        };
        pp$1.parseIfStatement = function(node) {
          this.next();
          node.test = this.parseParenExpression();
          node.consequent = this.parseStatement("if");
          node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
          return this.finishNode(node, "IfStatement");
        };
        pp$1.parseReturnStatement = function(node) {
          if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
            this.raise(this.start, "'return' outside of function");
          }
          this.next();
          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.argument = null;
          } else {
            node.argument = this.parseExpression();
            this.semicolon();
          }
          return this.finishNode(node, "ReturnStatement");
        };
        pp$1.parseSwitchStatement = function(node) {
          this.next();
          node.discriminant = this.parseParenExpression();
          node.cases = [];
          this.expect(types.braceL);
          this.labels.push(switchLabel);
          this.enterScope(0);
          var cur;
          for (var sawDefault = false; this.type !== types.braceR; ) {
            if (this.type === types._case || this.type === types._default) {
              var isCase = this.type === types._case;
              if (cur) {
                this.finishNode(cur, "SwitchCase");
              }
              node.cases.push(cur = this.startNode());
              cur.consequent = [];
              this.next();
              if (isCase) {
                cur.test = this.parseExpression();
              } else {
                if (sawDefault) {
                  this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
                }
                sawDefault = true;
                cur.test = null;
              }
              this.expect(types.colon);
            } else {
              if (!cur) {
                this.unexpected();
              }
              cur.consequent.push(this.parseStatement(null));
            }
          }
          this.exitScope();
          if (cur) {
            this.finishNode(cur, "SwitchCase");
          }
          this.next();
          this.labels.pop();
          return this.finishNode(node, "SwitchStatement");
        };
        pp$1.parseThrowStatement = function(node) {
          this.next();
          if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
            this.raise(this.lastTokEnd, "Illegal newline after throw");
          }
          node.argument = this.parseExpression();
          this.semicolon();
          return this.finishNode(node, "ThrowStatement");
        };
        var empty = [];
        pp$1.parseTryStatement = function(node) {
          this.next();
          node.block = this.parseBlock();
          node.handler = null;
          if (this.type === types._catch) {
            var clause = this.startNode();
            this.next();
            if (this.eat(types.parenL)) {
              clause.param = this.parseBindingAtom();
              var simple = clause.param.type === "Identifier";
              this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
              this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
              this.expect(types.parenR);
            } else {
              if (this.options.ecmaVersion < 10) {
                this.unexpected();
              }
              clause.param = null;
              this.enterScope(0);
            }
            clause.body = this.parseBlock(false);
            this.exitScope();
            node.handler = this.finishNode(clause, "CatchClause");
          }
          node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
          if (!node.handler && !node.finalizer) {
            this.raise(node.start, "Missing catch or finally clause");
          }
          return this.finishNode(node, "TryStatement");
        };
        pp$1.parseVarStatement = function(node, kind) {
          this.next();
          this.parseVar(node, false, kind);
          this.semicolon();
          return this.finishNode(node, "VariableDeclaration");
        };
        pp$1.parseWhileStatement = function(node) {
          this.next();
          node.test = this.parseParenExpression();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("while");
          this.labels.pop();
          return this.finishNode(node, "WhileStatement");
        };
        pp$1.parseWithStatement = function(node) {
          if (this.strict) {
            this.raise(this.start, "'with' in strict mode");
          }
          this.next();
          node.object = this.parseParenExpression();
          node.body = this.parseStatement("with");
          return this.finishNode(node, "WithStatement");
        };
        pp$1.parseEmptyStatement = function(node) {
          this.next();
          return this.finishNode(node, "EmptyStatement");
        };
        pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {
          for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
            var label = list[i$1];
            if (label.name === maybeName) {
              this.raise(expr.start, "Label '" + maybeName + "' is already declared");
            }
          }
          var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
          for (var i = this.labels.length - 1; i >= 0; i--) {
            var label$1 = this.labels[i];
            if (label$1.statementStart === node.start) {
              label$1.statementStart = this.start;
              label$1.kind = kind;
            } else {
              break;
            }
          }
          this.labels.push({ name: maybeName, kind, statementStart: this.start });
          node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
          this.labels.pop();
          node.label = expr;
          return this.finishNode(node, "LabeledStatement");
        };
        pp$1.parseExpressionStatement = function(node, expr) {
          node.expression = expr;
          this.semicolon();
          return this.finishNode(node, "ExpressionStatement");
        };
        pp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {
          if (createNewLexicalScope === void 0)
            createNewLexicalScope = true;
          if (node === void 0)
            node = this.startNode();
          node.body = [];
          this.expect(types.braceL);
          if (createNewLexicalScope) {
            this.enterScope(0);
          }
          while (this.type !== types.braceR) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          if (exitStrict) {
            this.strict = false;
          }
          this.next();
          if (createNewLexicalScope) {
            this.exitScope();
          }
          return this.finishNode(node, "BlockStatement");
        };
        pp$1.parseFor = function(node, init) {
          node.init = init;
          this.expect(types.semi);
          node.test = this.type === types.semi ? null : this.parseExpression();
          this.expect(types.semi);
          node.update = this.type === types.parenR ? null : this.parseExpression();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, "ForStatement");
        };
        pp$1.parseForIn = function(node, init) {
          var isForIn = this.type === types._in;
          this.next();
          if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
          }
          node.left = init;
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        };
        pp$1.parseVar = function(node, isFor, kind) {
          node.declarations = [];
          node.kind = kind;
          for (; ; ) {
            var decl = this.startNode();
            this.parseVarId(decl, kind);
            if (this.eat(types.eq)) {
              decl.init = this.parseMaybeAssign(isFor);
            } else if (kind === "const" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
              this.unexpected();
            } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
              this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
            } else {
              decl.init = null;
            }
            node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
            if (!this.eat(types.comma)) {
              break;
            }
          }
          return node;
        };
        pp$1.parseVarId = function(decl, kind) {
          decl.id = this.parseBindingAtom();
          this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
        };
        var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
        pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {
          this.initFunction(node);
          if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
            if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {
              this.unexpected();
            }
            node.generator = this.eat(types.star);
          }
          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }
          if (statement & FUNC_STATEMENT) {
            node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();
            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
              this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
            }
          }
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(node.async, node.generator));
          if (!(statement & FUNC_STATEMENT)) {
            node.id = this.type === types.name ? this.parseIdent() : null;
          }
          this.parseFunctionParams(node);
          this.parseFunctionBody(node, allowExpressionBody, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        };
        pp$1.parseFunctionParams = function(node) {
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
        };
        pp$1.parseClass = function(node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true;
          this.parseClassId(node, isStatement);
          this.parseClassSuper(node);
          var privateNameMap = this.enterClassBody();
          var classBody = this.startNode();
          var hadConstructor = false;
          classBody.body = [];
          this.expect(types.braceL);
          while (this.type !== types.braceR) {
            var element = this.parseClassElement(node.superClass !== null);
            if (element) {
              classBody.body.push(element);
              if (element.type === "MethodDefinition" && element.kind === "constructor") {
                if (hadConstructor) {
                  this.raise(element.start, "Duplicate constructor in the same class");
                }
                hadConstructor = true;
              } else if (element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
                this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared");
              }
            }
          }
          this.strict = oldStrict;
          this.next();
          node.body = this.finishNode(classBody, "ClassBody");
          this.exitClassBody();
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        };
        pp$1.parseClassElement = function(constructorAllowsSuper) {
          if (this.eat(types.semi)) {
            return null;
          }
          var ecmaVersion = this.options.ecmaVersion;
          var node = this.startNode();
          var keyName = "";
          var isGenerator = false;
          var isAsync = false;
          var kind = "method";
          node.static = false;
          if (this.eatContextual("static")) {
            if (this.isClassElementNameStart() || this.type === types.star) {
              node.static = true;
            } else {
              keyName = "static";
            }
          }
          if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
            if ((this.isClassElementNameStart() || this.type === types.star) && !this.canInsertSemicolon()) {
              isAsync = true;
            } else {
              keyName = "async";
            }
          }
          if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types.star)) {
            isGenerator = true;
          }
          if (!keyName && !isAsync && !isGenerator) {
            var lastValue = this.value;
            if (this.eatContextual("get") || this.eatContextual("set")) {
              if (this.isClassElementNameStart()) {
                kind = lastValue;
              } else {
                keyName = lastValue;
              }
            }
          }
          if (keyName) {
            node.computed = false;
            node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
            node.key.name = keyName;
            this.finishNode(node.key, "Identifier");
          } else {
            this.parseClassElementName(node);
          }
          if (ecmaVersion < 13 || this.type === types.parenL || kind !== "method" || isGenerator || isAsync) {
            var isConstructor = !node.static && checkKeyName(node, "constructor");
            var allowsDirectSuper = isConstructor && constructorAllowsSuper;
            if (isConstructor && kind !== "method") {
              this.raise(node.key.start, "Constructor can't have get/set modifier");
            }
            node.kind = isConstructor ? "constructor" : kind;
            this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
          } else {
            this.parseClassField(node);
          }
          return node;
        };
        pp$1.isClassElementNameStart = function() {
          return this.type === types.name || this.type === types.privateId || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword;
        };
        pp$1.parseClassElementName = function(element) {
          if (this.type === types.privateId) {
            if (this.value === "constructor") {
              this.raise(this.start, "Classes can't have an element named '#constructor'");
            }
            element.computed = false;
            element.key = this.parsePrivateIdent();
          } else {
            this.parsePropertyName(element);
          }
        };
        pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
          var key = method.key;
          if (method.kind === "constructor") {
            if (isGenerator) {
              this.raise(key.start, "Constructor can't be a generator");
            }
            if (isAsync) {
              this.raise(key.start, "Constructor can't be an async method");
            }
          } else if (method.static && checkKeyName(method, "prototype")) {
            this.raise(key.start, "Classes may not have a static property named prototype");
          }
          var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          if (method.kind === "get" && value.params.length !== 0) {
            this.raiseRecoverable(value.start, "getter should have no params");
          }
          if (method.kind === "set" && value.params.length !== 1) {
            this.raiseRecoverable(value.start, "setter should have exactly one param");
          }
          if (method.kind === "set" && value.params[0].type === "RestElement") {
            this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
          }
          return this.finishNode(method, "MethodDefinition");
        };
        pp$1.parseClassField = function(field) {
          if (checkKeyName(field, "constructor")) {
            this.raise(field.key.start, "Classes can't have a field named 'constructor'");
          } else if (field.static && checkKeyName(field, "prototype")) {
            this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
          }
          if (this.eat(types.eq)) {
            var scope = this.currentThisScope();
            var inClassFieldInit = scope.inClassFieldInit;
            scope.inClassFieldInit = true;
            field.value = this.parseMaybeAssign();
            scope.inClassFieldInit = inClassFieldInit;
          } else {
            field.value = null;
          }
          this.semicolon();
          return this.finishNode(field, "PropertyDefinition");
        };
        pp$1.parseClassId = function(node, isStatement) {
          if (this.type === types.name) {
            node.id = this.parseIdent();
            if (isStatement) {
              this.checkLValSimple(node.id, BIND_LEXICAL, false);
            }
          } else {
            if (isStatement === true) {
              this.unexpected();
            }
            node.id = null;
          }
        };
        pp$1.parseClassSuper = function(node) {
          node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
        };
        pp$1.enterClassBody = function() {
          var element = { declared: Object.create(null), used: [] };
          this.privateNameStack.push(element);
          return element.declared;
        };
        pp$1.exitClassBody = function() {
          var ref2 = this.privateNameStack.pop();
          var declared = ref2.declared;
          var used = ref2.used;
          var len = this.privateNameStack.length;
          var parent = len === 0 ? null : this.privateNameStack[len - 1];
          for (var i = 0; i < used.length; ++i) {
            var id = used[i];
            if (!has(declared, id.name)) {
              if (parent) {
                parent.used.push(id);
              } else {
                this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class");
              }
            }
          }
        };
        function isPrivateNameConflicted(privateNameMap, element) {
          var name = element.key.name;
          var curr = privateNameMap[name];
          var next = "true";
          if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
            next = (element.static ? "s" : "i") + element.kind;
          }
          if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
            privateNameMap[name] = "true";
            return false;
          } else if (!curr) {
            privateNameMap[name] = next;
            return false;
          } else {
            return true;
          }
        }
        function checkKeyName(node, name) {
          var computed = node.computed;
          var key = node.key;
          return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
        }
        pp$1.parseExport = function(node, exports3) {
          this.next();
          if (this.eat(types.star)) {
            if (this.options.ecmaVersion >= 11) {
              if (this.eatContextual("as")) {
                node.exported = this.parseIdent(true);
                this.checkExport(exports3, node.exported.name, this.lastTokStart);
              } else {
                node.exported = null;
              }
            }
            this.expectContextual("from");
            if (this.type !== types.string) {
              this.unexpected();
            }
            node.source = this.parseExprAtom();
            this.semicolon();
            return this.finishNode(node, "ExportAllDeclaration");
          }
          if (this.eat(types._default)) {
            this.checkExport(exports3, "default", this.lastTokStart);
            var isAsync;
            if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode();
              this.next();
              if (isAsync) {
                this.next();
              }
              node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
            } else if (this.type === types._class) {
              var cNode = this.startNode();
              node.declaration = this.parseClass(cNode, "nullableID");
            } else {
              node.declaration = this.parseMaybeAssign();
              this.semicolon();
            }
            return this.finishNode(node, "ExportDefaultDeclaration");
          }
          if (this.shouldParseExportStatement()) {
            node.declaration = this.parseStatement(null);
            if (node.declaration.type === "VariableDeclaration") {
              this.checkVariableExport(exports3, node.declaration.declarations);
            } else {
              this.checkExport(exports3, node.declaration.id.name, node.declaration.id.start);
            }
            node.specifiers = [];
            node.source = null;
          } else {
            node.declaration = null;
            node.specifiers = this.parseExportSpecifiers(exports3);
            if (this.eatContextual("from")) {
              if (this.type !== types.string) {
                this.unexpected();
              }
              node.source = this.parseExprAtom();
            } else {
              for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                var spec = list[i];
                this.checkUnreserved(spec.local);
                this.checkLocalExport(spec.local);
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        };
        pp$1.checkExport = function(exports3, name, pos) {
          if (!exports3) {
            return;
          }
          if (has(exports3, name)) {
            this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
          }
          exports3[name] = true;
        };
        pp$1.checkPatternExport = function(exports3, pat) {
          var type = pat.type;
          if (type === "Identifier") {
            this.checkExport(exports3, pat.name, pat.start);
          } else if (type === "ObjectPattern") {
            for (var i = 0, list = pat.properties; i < list.length; i += 1) {
              var prop = list[i];
              this.checkPatternExport(exports3, prop);
            }
          } else if (type === "ArrayPattern") {
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1];
              if (elt) {
                this.checkPatternExport(exports3, elt);
              }
            }
          } else if (type === "Property") {
            this.checkPatternExport(exports3, pat.value);
          } else if (type === "AssignmentPattern") {
            this.checkPatternExport(exports3, pat.left);
          } else if (type === "RestElement") {
            this.checkPatternExport(exports3, pat.argument);
          } else if (type === "ParenthesizedExpression") {
            this.checkPatternExport(exports3, pat.expression);
          }
        };
        pp$1.checkVariableExport = function(exports3, decls) {
          if (!exports3) {
            return;
          }
          for (var i = 0, list = decls; i < list.length; i += 1) {
            var decl = list[i];
            this.checkPatternExport(exports3, decl.id);
          }
        };
        pp$1.shouldParseExportStatement = function() {
          return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
        };
        pp$1.parseExportSpecifiers = function(exports3) {
          var nodes = [], first = true;
          this.expect(types.braceL);
          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);
              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }
            var node = this.startNode();
            node.local = this.parseIdent(true);
            node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
            this.checkExport(exports3, node.exported.name, node.exported.start);
            nodes.push(this.finishNode(node, "ExportSpecifier"));
          }
          return nodes;
        };
        pp$1.parseImport = function(node) {
          this.next();
          if (this.type === types.string) {
            node.specifiers = empty;
            node.source = this.parseExprAtom();
          } else {
            node.specifiers = this.parseImportSpecifiers();
            this.expectContextual("from");
            node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
          }
          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        };
        pp$1.parseImportSpecifiers = function() {
          var nodes = [], first = true;
          if (this.type === types.name) {
            var node = this.startNode();
            node.local = this.parseIdent();
            this.checkLValSimple(node.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
            if (!this.eat(types.comma)) {
              return nodes;
            }
          }
          if (this.type === types.star) {
            var node$1 = this.startNode();
            this.next();
            this.expectContextual("as");
            node$1.local = this.parseIdent();
            this.checkLValSimple(node$1.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
            return nodes;
          }
          this.expect(types.braceL);
          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);
              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }
            var node$2 = this.startNode();
            node$2.imported = this.parseIdent(true);
            if (this.eatContextual("as")) {
              node$2.local = this.parseIdent();
            } else {
              this.checkUnreserved(node$2.imported);
              node$2.local = node$2.imported;
            }
            this.checkLValSimple(node$2.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$2, "ImportSpecifier"));
          }
          return nodes;
        };
        pp$1.adaptDirectivePrologue = function(statements) {
          for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
            statements[i].directive = statements[i].expression.raw.slice(1, -1);
          }
        };
        pp$1.isDirectiveCandidate = function(statement) {
          return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === '"' || this.input[statement.start] === "'");
        };
        var pp$2 = Parser.prototype;
        pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) {
            switch (node.type) {
              case "Identifier":
                if (this.inAsync && node.name === "await") {
                  this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
                }
                break;
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern";
                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }
                for (var i = 0, list = node.properties; i < list.length; i += 1) {
                  var prop = list[i];
                  this.toAssignable(prop, isBinding);
                  if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                    this.raise(prop.argument.start, "Unexpected token");
                  }
                }
                break;
              case "Property":
                if (node.kind !== "init") {
                  this.raise(node.key.start, "Object pattern can't contain getter or setter");
                }
                this.toAssignable(node.value, isBinding);
                break;
              case "ArrayExpression":
                node.type = "ArrayPattern";
                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }
                this.toAssignableList(node.elements, isBinding);
                break;
              case "SpreadElement":
                node.type = "RestElement";
                this.toAssignable(node.argument, isBinding);
                if (node.argument.type === "AssignmentPattern") {
                  this.raise(node.argument.start, "Rest elements cannot have a default value");
                }
                break;
              case "AssignmentExpression":
                if (node.operator !== "=") {
                  this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
                }
                node.type = "AssignmentPattern";
                delete node.operator;
                this.toAssignable(node.left, isBinding);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isBinding, refDestructuringErrors);
                break;
              case "ChainExpression":
                this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
                break;
              case "MemberExpression":
                if (!isBinding) {
                  break;
                }
              default:
                this.raise(node.start, "Assigning to rvalue");
            }
          } else if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true);
          }
          return node;
        };
        pp$2.toAssignableList = function(exprList, isBinding) {
          var end = exprList.length;
          for (var i = 0; i < end; i++) {
            var elt = exprList[i];
            if (elt) {
              this.toAssignable(elt, isBinding);
            }
          }
          if (end) {
            var last = exprList[end - 1];
            if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
              this.unexpected(last.argument.start);
            }
          }
          return exprList;
        };
        pp$2.parseSpread = function(refDestructuringErrors) {
          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          return this.finishNode(node, "SpreadElement");
        };
        pp$2.parseRestBinding = function() {
          var node = this.startNode();
          this.next();
          if (this.options.ecmaVersion === 6 && this.type !== types.name) {
            this.unexpected();
          }
          node.argument = this.parseBindingAtom();
          return this.finishNode(node, "RestElement");
        };
        pp$2.parseBindingAtom = function() {
          if (this.options.ecmaVersion >= 6) {
            switch (this.type) {
              case types.bracketL:
                var node = this.startNode();
                this.next();
                node.elements = this.parseBindingList(types.bracketR, true, true);
                return this.finishNode(node, "ArrayPattern");
              case types.braceL:
                return this.parseObj(true);
            }
          }
          return this.parseIdent();
        };
        pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
          var elts = [], first = true;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(types.comma);
            }
            if (allowEmpty && this.type === types.comma) {
              elts.push(null);
            } else if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            } else if (this.type === types.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest);
              elts.push(rest);
              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }
              this.expect(close);
              break;
            } else {
              var elem = this.parseMaybeDefault(this.start, this.startLoc);
              this.parseBindingListItem(elem);
              elts.push(elem);
            }
          }
          return elts;
        };
        pp$2.parseBindingListItem = function(param) {
          return param;
        };
        pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
          left = left || this.parseBindingAtom();
          if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
            return left;
          }
          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.right = this.parseMaybeAssign();
          return this.finishNode(node, "AssignmentPattern");
        };
        pp$2.checkLValSimple = function(expr, bindingType, checkClashes) {
          if (bindingType === void 0)
            bindingType = BIND_NONE;
          var isBind = bindingType !== BIND_NONE;
          switch (expr.type) {
            case "Identifier":
              if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
                this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
              }
              if (isBind) {
                if (bindingType === BIND_LEXICAL && expr.name === "let") {
                  this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
                }
                if (checkClashes) {
                  if (has(checkClashes, expr.name)) {
                    this.raiseRecoverable(expr.start, "Argument name clash");
                  }
                  checkClashes[expr.name] = true;
                }
                if (bindingType !== BIND_OUTSIDE) {
                  this.declareName(expr.name, bindingType, expr.start);
                }
              }
              break;
            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (isBind) {
                this.raiseRecoverable(expr.start, "Binding member expression");
              }
              break;
            case "ParenthesizedExpression":
              if (isBind) {
                this.raiseRecoverable(expr.start, "Binding parenthesized expression");
              }
              return this.checkLValSimple(expr.expression, bindingType, checkClashes);
            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
          }
        };
        pp$2.checkLValPattern = function(expr, bindingType, checkClashes) {
          if (bindingType === void 0)
            bindingType = BIND_NONE;
          switch (expr.type) {
            case "ObjectPattern":
              for (var i = 0, list = expr.properties; i < list.length; i += 1) {
                var prop = list[i];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
              }
              break;
            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];
                if (elem) {
                  this.checkLValInnerPattern(elem, bindingType, checkClashes);
                }
              }
              break;
            default:
              this.checkLValSimple(expr, bindingType, checkClashes);
          }
        };
        pp$2.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
          if (bindingType === void 0)
            bindingType = BIND_NONE;
          switch (expr.type) {
            case "Property":
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
              break;
            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes);
              break;
            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes);
              break;
            default:
              this.checkLValPattern(expr, bindingType, checkClashes);
          }
        };
        var pp$3 = Parser.prototype;
        pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
            return;
          }
          if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
            return;
          }
          var key = prop.key;
          var name;
          switch (key.type) {
            case "Identifier":
              name = key.name;
              break;
            case "Literal":
              name = String(key.value);
              break;
            default:
              return;
          }
          var kind = prop.kind;
          if (this.options.ecmaVersion >= 6) {
            if (name === "__proto__" && kind === "init") {
              if (propHash.proto) {
                if (refDestructuringErrors) {
                  if (refDestructuringErrors.doubleProto < 0) {
                    refDestructuringErrors.doubleProto = key.start;
                  }
                } else {
                  this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
                }
              }
              propHash.proto = true;
            }
            return;
          }
          name = "$" + name;
          var other = propHash[name];
          if (other) {
            var redefinition;
            if (kind === "init") {
              redefinition = this.strict && other.init || other.get || other.set;
            } else {
              redefinition = other.init || other[kind];
            }
            if (redefinition) {
              this.raiseRecoverable(key.start, "Redefinition of property");
            }
          } else {
            other = propHash[name] = {
              init: false,
              get: false,
              set: false
            };
          }
          other[kind] = true;
        };
        pp$3.parseExpression = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc;
          var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
          if (this.type === types.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            node.expressions = [expr];
            while (this.eat(types.comma)) {
              node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
            }
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        };
        pp$3.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) {
              return this.parseYield(forInit);
            } else {
              this.exprAllowed = false;
            }
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
          if (refDestructuringErrors) {
            oldParenAssign = refDestructuringErrors.parenthesizedAssign;
            oldTrailingComma = refDestructuringErrors.trailingComma;
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
          } else {
            refDestructuringErrors = new DestructuringErrors();
            ownDestructuringErrors = true;
          }
          var startPos = this.start, startLoc = this.startLoc;
          if (this.type === types.parenL || this.type === types.name) {
            this.potentialArrowAt = this.start;
            this.potentialArrowInForAwait = forInit === "await";
          }
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startPos, startLoc);
          }
          if (this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            node.operator = this.value;
            if (this.type === types.eq) {
              left = this.toAssignable(left, false, refDestructuringErrors);
            }
            if (!ownDestructuringErrors) {
              refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
            }
            if (refDestructuringErrors.shorthandAssign >= left.start) {
              refDestructuringErrors.shorthandAssign = -1;
            }
            if (this.type === types.eq) {
              this.checkLValPattern(left);
            } else {
              this.checkLValSimple(left);
            }
            node.left = left;
            this.next();
            node.right = this.parseMaybeAssign(forInit);
            return this.finishNode(node, "AssignmentExpression");
          } else {
            if (ownDestructuringErrors) {
              this.checkExpressionErrors(refDestructuringErrors, true);
            }
          }
          if (oldParenAssign > -1) {
            refDestructuringErrors.parenthesizedAssign = oldParenAssign;
          }
          if (oldTrailingComma > -1) {
            refDestructuringErrors.trailingComma = oldTrailingComma;
          }
          return left;
        };
        pp$3.parseMaybeConditional = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc;
          var expr = this.parseExprOps(forInit, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          if (this.eat(types.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssign();
            this.expect(types.colon);
            node.alternate = this.parseMaybeAssign(forInit);
            return this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        };
        pp$3.parseExprOps = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc;
          var expr = this.parseMaybeUnary(refDestructuringErrors, false);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
        };
        pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop;
          if (prec != null && (!forInit || this.type !== types._in)) {
            if (prec > minPrec) {
              var logical = this.type === types.logicalOR || this.type === types.logicalAND;
              var coalesce = this.type === types.coalesce;
              if (coalesce) {
                prec = types.logicalAND.binop;
              }
              var op = this.value;
              this.next();
              var startPos = this.start, startLoc = this.startLoc;
              var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, forInit);
              var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
              if (logical && this.type === types.coalesce || coalesce && (this.type === types.logicalOR || this.type === types.logicalAND)) {
                this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
              }
              return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
            }
          }
          return left;
        };
        pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.operator = op;
          node.right = right;
          return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        };
        pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec) {
          var startPos = this.start, startLoc = this.startLoc, expr;
          if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
            expr = this.parseAwait();
            sawUnary = true;
          } else if (this.type.prefix) {
            var node = this.startNode(), update = this.type === types.incDec;
            node.operator = this.value;
            node.prefix = true;
            this.next();
            node.argument = this.parseMaybeUnary(null, true, update);
            this.checkExpressionErrors(refDestructuringErrors, true);
            if (update) {
              this.checkLValSimple(node.argument);
            } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
              this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
            } else if (node.operator === "delete" && isPrivateFieldAccess(node.argument)) {
              this.raiseRecoverable(node.start, "Private fields can not be deleted");
            } else {
              sawUnary = true;
            }
            expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else {
            expr = this.parseExprSubscripts(refDestructuringErrors);
            if (this.checkExpressionErrors(refDestructuringErrors)) {
              return expr;
            }
            while (this.type.postfix && !this.canInsertSemicolon()) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value;
              node$1.prefix = false;
              node$1.argument = expr;
              this.checkLValSimple(expr);
              this.next();
              expr = this.finishNode(node$1, "UpdateExpression");
            }
          }
          if (!incDec && this.eat(types.starstar)) {
            if (sawUnary) {
              this.unexpected(this.lastTokStart);
            } else {
              return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
            }
          } else {
            return expr;
          }
        };
        function isPrivateFieldAccess(node) {
          return node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" || node.type === "ChainExpression" && isPrivateFieldAccess(node.expression);
        }
        pp$3.parseExprSubscripts = function(refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc;
          var expr = this.parseExprAtom(refDestructuringErrors);
          if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
            return expr;
          }
          var result = this.parseSubscripts(expr, startPos, startLoc);
          if (refDestructuringErrors && result.type === "MemberExpression") {
            if (refDestructuringErrors.parenthesizedAssign >= result.start) {
              refDestructuringErrors.parenthesizedAssign = -1;
            }
            if (refDestructuringErrors.parenthesizedBind >= result.start) {
              refDestructuringErrors.parenthesizedBind = -1;
            }
            if (refDestructuringErrors.trailingComma >= result.start) {
              refDestructuringErrors.trailingComma = -1;
            }
          }
          return result;
        };
        pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
          var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
          var optionalChained = false;
          while (true) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);
            if (element.optional) {
              optionalChained = true;
            }
            if (element === base || element.type === "ArrowFunctionExpression") {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element;
                element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        };
        pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {
          var optionalSupported = this.options.ecmaVersion >= 11;
          var optional = optionalSupported && this.eat(types.questionDot);
          if (noCalls && optional) {
            this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          }
          var computed = this.eat(types.bracketL);
          if (computed || optional && this.type !== types.parenL && this.type !== types.backQuote || this.eat(types.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base;
            if (computed) {
              node.property = this.parseExpression();
              this.expect(types.bracketR);
            } else if (this.type === types.privateId && base.type !== "Super") {
              node.property = this.parsePrivateIdent();
            } else {
              node.property = this.parseIdent(this.options.allowReserved !== "never");
            }
            node.computed = !!computed;
            if (optionalSupported) {
              node.optional = optional;
            }
            base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0;
            this.awaitPos = 0;
            this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();
              if (this.awaitIdentPos > 0) {
                this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
              }
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              this.awaitIdentPos = oldAwaitIdentPos;
              return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
            }
            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;
            this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base;
            node$1.arguments = exprList;
            if (optionalSupported) {
              node$1.optional = optional;
            }
            base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types.backQuote) {
            if (optional || optionalChained) {
              this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
            }
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base;
            node$2.quasi = this.parseTemplate({ isTagged: true });
            base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        };
        pp$3.parseExprAtom = function(refDestructuringErrors) {
          if (this.type === types.slash) {
            this.readRegexp();
          }
          var node, canBeArrow = this.potentialArrowAt === this.start;
          switch (this.type) {
            case types._super:
              if (!this.allowSuper) {
                this.raise(this.start, "'super' keyword outside a method");
              }
              node = this.startNode();
              this.next();
              if (this.type === types.parenL && !this.allowDirectSuper) {
                this.raise(node.start, "super() call outside constructor of a subclass");
              }
              if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
                this.unexpected();
              }
              return this.finishNode(node, "Super");
            case types._this:
              node = this.startNode();
              this.next();
              return this.finishNode(node, "ThisExpression");
            case types.name:
              var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
              var id = this.parseIdent(false);
              if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
                return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
              }
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types.arrow)) {
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
                }
                if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
                  id = this.parseIdent(false);
                  if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                    this.unexpected();
                  }
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
                }
              }
              return id;
            case types.regexp:
              var value = this.value;
              node = this.parseLiteral(value.value);
              node.regex = { pattern: value.pattern, flags: value.flags };
              return node;
            case types.num:
            case types.string:
              return this.parseLiteral(this.value);
            case types._null:
            case types._true:
            case types._false:
              node = this.startNode();
              node.value = this.type === types._null ? null : this.type === types._true;
              node.raw = this.type.keyword;
              this.next();
              return this.finishNode(node, "Literal");
            case types.parenL:
              var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
              if (refDestructuringErrors) {
                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                  refDestructuringErrors.parenthesizedAssign = start;
                }
                if (refDestructuringErrors.parenthesizedBind < 0) {
                  refDestructuringErrors.parenthesizedBind = start;
                }
              }
              return expr;
            case types.bracketL:
              node = this.startNode();
              this.next();
              node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
              return this.finishNode(node, "ArrayExpression");
            case types.braceL:
              return this.parseObj(false, refDestructuringErrors);
            case types._function:
              node = this.startNode();
              this.next();
              return this.parseFunction(node, 0);
            case types._class:
              return this.parseClass(this.startNode(), false);
            case types._new:
              return this.parseNew();
            case types.backQuote:
              return this.parseTemplate();
            case types._import:
              if (this.options.ecmaVersion >= 11) {
                return this.parseExprImport();
              } else {
                return this.unexpected();
              }
            default:
              this.unexpected();
          }
        };
        pp$3.parseExprImport = function() {
          var node = this.startNode();
          if (this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword import");
          }
          var meta = this.parseIdent(true);
          switch (this.type) {
            case types.parenL:
              return this.parseDynamicImport(node);
            case types.dot:
              node.meta = meta;
              return this.parseImportMeta(node);
            default:
              this.unexpected();
          }
        };
        pp$3.parseDynamicImport = function(node) {
          this.next();
          node.source = this.parseMaybeAssign();
          if (!this.eat(types.parenR)) {
            var errorPos = this.start;
            if (this.eat(types.comma) && this.eat(types.parenR)) {
              this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
            } else {
              this.unexpected(errorPos);
            }
          }
          return this.finishNode(node, "ImportExpression");
        };
        pp$3.parseImportMeta = function(node) {
          this.next();
          var containsEsc = this.containsEsc;
          node.property = this.parseIdent(true);
          if (node.property.name !== "meta") {
            this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'");
          }
          if (containsEsc) {
            this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters");
          }
          if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
            this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module");
          }
          return this.finishNode(node, "MetaProperty");
        };
        pp$3.parseLiteral = function(value) {
          var node = this.startNode();
          node.value = value;
          node.raw = this.input.slice(this.start, this.end);
          if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
            node.bigint = node.raw.slice(0, -1).replace(/_/g, "");
          }
          this.next();
          return this.finishNode(node, "Literal");
        };
        pp$3.parseParenExpression = function() {
          this.expect(types.parenL);
          var val = this.parseExpression();
          this.expect(types.parenR);
          return val;
        };
        pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
          var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
          if (this.options.ecmaVersion >= 6) {
            this.next();
            var innerStartPos = this.start, innerStartLoc = this.startLoc;
            var exprList = [], first = true, lastIsComma = false;
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
            this.yieldPos = 0;
            this.awaitPos = 0;
            while (this.type !== types.parenR) {
              first ? first = false : this.expect(types.comma);
              if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
                lastIsComma = true;
                break;
              } else if (this.type === types.ellipsis) {
                spreadStart = this.start;
                exprList.push(this.parseParenItem(this.parseRestBinding()));
                if (this.type === types.comma) {
                  this.raise(this.start, "Comma is not permitted after the rest element");
                }
                break;
              } else {
                exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
              }
            }
            var innerEndPos = this.start, innerEndLoc = this.startLoc;
            this.expect(types.parenR);
            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              return this.parseParenArrowList(startPos, startLoc, exprList);
            }
            if (!exprList.length || lastIsComma) {
              this.unexpected(this.lastTokStart);
            }
            if (spreadStart) {
              this.unexpected(spreadStart);
            }
            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;
            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
            } else {
              val = exprList[0];
            }
          } else {
            val = this.parseParenExpression();
          }
          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            par.expression = val;
            return this.finishNode(par, "ParenthesizedExpression");
          } else {
            return val;
          }
        };
        pp$3.parseParenItem = function(item) {
          return item;
        };
        pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
        };
        var empty$1 = [];
        pp$3.parseNew = function() {
          if (this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          }
          var node = this.startNode();
          var meta = this.parseIdent(true);
          if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
            node.meta = meta;
            var containsEsc = this.containsEsc;
            node.property = this.parseIdent(true);
            if (node.property.name !== "target") {
              this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'");
            }
            if (containsEsc) {
              this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters");
            }
            if (!this.inNonArrowFunction) {
              this.raiseRecoverable(node.start, "'new.target' can only be used in functions");
            }
            return this.finishNode(node, "MetaProperty");
          }
          var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;
          node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
          if (isImport && node.callee.type === "ImportExpression") {
            this.raise(startPos, "Cannot use new with import()");
          }
          if (this.eat(types.parenL)) {
            node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
          } else {
            node.arguments = empty$1;
          }
          return this.finishNode(node, "NewExpression");
        };
        pp$3.parseTemplateElement = function(ref2) {
          var isTagged = ref2.isTagged;
          var elem = this.startNode();
          if (this.type === types.invalidTemplate) {
            if (!isTagged) {
              this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
            }
            elem.value = {
              raw: this.value,
              cooked: null
            };
          } else {
            elem.value = {
              raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
              cooked: this.value
            };
          }
          this.next();
          elem.tail = this.type === types.backQuote;
          return this.finishNode(elem, "TemplateElement");
        };
        pp$3.parseTemplate = function(ref2) {
          if (ref2 === void 0)
            ref2 = {};
          var isTagged = ref2.isTagged;
          if (isTagged === void 0)
            isTagged = false;
          var node = this.startNode();
          this.next();
          node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged });
          node.quasis = [curElt];
          while (!curElt.tail) {
            if (this.type === types.eof) {
              this.raise(this.pos, "Unterminated template literal");
            }
            this.expect(types.dollarBraceL);
            node.expressions.push(this.parseExpression());
            this.expect(types.braceR);
            node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
          }
          this.next();
          return this.finishNode(node, "TemplateLiteral");
        };
        pp$3.isAsyncProp = function(prop) {
          return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };
        pp$3.parseObj = function(isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          node.properties = [];
          this.next();
          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);
              if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            if (!isPattern) {
              this.checkPropClash(prop, propHash, refDestructuringErrors);
            }
            node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        };
        pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
          var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
          if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
            if (isPattern) {
              prop.argument = this.parseIdent(false);
              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }
              return this.finishNode(prop, "RestElement");
            }
            if (this.type === types.parenL && refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0) {
                refDestructuringErrors.parenthesizedAssign = this.start;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = this.start;
              }
            }
            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
            if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }
            return this.finishNode(prop, "SpreadElement");
          }
          if (this.options.ecmaVersion >= 6) {
            prop.method = false;
            prop.shorthand = false;
            if (isPattern || refDestructuringErrors) {
              startPos = this.start;
              startLoc = this.startLoc;
            }
            if (!isPattern) {
              isGenerator = this.eat(types.star);
            }
          }
          var containsEsc = this.containsEsc;
          this.parsePropertyName(prop);
          if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
            isAsync = true;
            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
            this.parsePropertyName(prop, refDestructuringErrors);
          } else {
            isAsync = false;
          }
          this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
          return this.finishNode(prop, "Property");
        };
        pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          if ((isGenerator || isAsync) && this.type === types.colon) {
            this.unexpected();
          }
          if (this.eat(types.colon)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
            prop.kind = "init";
          } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
            if (isPattern) {
              this.unexpected();
            }
            prop.kind = "init";
            prop.method = true;
            prop.value = this.parseMethod(isGenerator, isAsync);
          } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {
            if (isGenerator || isAsync) {
              this.unexpected();
            }
            prop.kind = prop.key.name;
            this.parsePropertyName(prop);
            prop.value = this.parseMethod(false);
            var paramCount = prop.kind === "get" ? 0 : 1;
            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start;
              if (prop.kind === "get") {
                this.raiseRecoverable(start, "getter should have no params");
              } else {
                this.raiseRecoverable(start, "setter should have exactly one param");
              }
            } else {
              if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
                this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
              }
            }
          } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
            if (isGenerator || isAsync) {
              this.unexpected();
            }
            this.checkUnreserved(prop.key);
            if (prop.key.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = startPos;
            }
            prop.kind = "init";
            if (isPattern) {
              prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
            } else if (this.type === types.eq && refDestructuringErrors) {
              if (refDestructuringErrors.shorthandAssign < 0) {
                refDestructuringErrors.shorthandAssign = this.start;
              }
              prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
            } else {
              prop.value = this.copyNode(prop.key);
            }
            prop.shorthand = true;
          } else {
            this.unexpected();
          }
        };
        pp$3.parsePropertyName = function(prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssign();
              this.expect(types.bracketR);
              return prop.key;
            } else {
              prop.computed = false;
            }
          }
          return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
        };
        pp$3.initFunction = function(node) {
          node.id = null;
          if (this.options.ecmaVersion >= 6) {
            node.generator = node.expression = false;
          }
          if (this.options.ecmaVersion >= 8) {
            node.async = false;
          }
        };
        pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.initFunction(node);
          if (this.options.ecmaVersion >= 6) {
            node.generator = isGenerator;
          }
          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
          this.parseFunctionBody(node, false, true);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "FunctionExpression");
        };
        pp$3.parseArrowExpression = function(node, params, isAsync) {
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
          this.initFunction(node);
          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          node.params = this.toAssignableList(params, true);
          this.parseFunctionBody(node, true, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "ArrowFunctionExpression");
        };
        pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {
          var isExpression = isArrowFunction && this.type !== types.braceL;
          var oldStrict = this.strict, useStrict = false;
          if (isExpression) {
            node.body = this.parseMaybeAssign();
            node.expression = true;
            this.checkParams(node, false);
          } else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            if (!oldStrict || nonSimple) {
              useStrict = this.strictDirective(this.end);
              if (useStrict && nonSimple) {
                this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
              }
            }
            var oldLabels = this.labels;
            this.labels = [];
            if (useStrict) {
              this.strict = true;
            }
            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
            if (this.strict && node.id) {
              this.checkLValSimple(node.id, BIND_OUTSIDE);
            }
            node.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
            node.expression = false;
            this.adaptDirectivePrologue(node.body.body);
            this.labels = oldLabels;
          }
          this.exitScope();
        };
        pp$3.isSimpleParamList = function(params) {
          for (var i = 0, list = params; i < list.length; i += 1) {
            var param = list[i];
            if (param.type !== "Identifier") {
              return false;
            }
          }
          return true;
        };
        pp$3.checkParams = function(node, allowDuplicates) {
          var nameHash = Object.create(null);
          for (var i = 0, list = node.params; i < list.length; i += 1) {
            var param = list[i];
            this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
          }
        };
        pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          var elts = [], first = true;
          while (!this.eat(close)) {
            if (!first) {
              this.expect(types.comma);
              if (allowTrailingComma && this.afterTrailingComma(close)) {
                break;
              }
            } else {
              first = false;
            }
            var elt = void 0;
            if (allowEmpty && this.type === types.comma) {
              elt = null;
            } else if (this.type === types.ellipsis) {
              elt = this.parseSpread(refDestructuringErrors);
              if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {
                refDestructuringErrors.trailingComma = this.start;
              }
            } else {
              elt = this.parseMaybeAssign(false, refDestructuringErrors);
            }
            elts.push(elt);
          }
          return elts;
        };
        pp$3.checkUnreserved = function(ref2) {
          var start = ref2.start;
          var end = ref2.end;
          var name = ref2.name;
          if (this.inGenerator && name === "yield") {
            this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
          }
          if (this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
          }
          if (this.currentThisScope().inClassFieldInit && name === "arguments") {
            this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer");
          }
          if (this.keywords.test(name)) {
            this.raise(start, "Unexpected keyword '" + name + "'");
          }
          if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
            return;
          }
          var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
          if (re.test(name)) {
            if (!this.inAsync && name === "await") {
              this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
            }
            this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
          }
        };
        pp$3.parseIdent = function(liberal, isBinding) {
          var node = this.startNode();
          if (this.type === types.name) {
            node.name = this.value;
          } else if (this.type.keyword) {
            node.name = this.type.keyword;
            if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
              this.context.pop();
            }
          } else {
            this.unexpected();
          }
          this.next(!!liberal);
          this.finishNode(node, "Identifier");
          if (!liberal) {
            this.checkUnreserved(node);
            if (node.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = node.start;
            }
          }
          return node;
        };
        pp$3.parsePrivateIdent = function() {
          var node = this.startNode();
          if (this.type === types.privateId) {
            node.name = this.value;
          } else {
            this.unexpected();
          }
          this.next();
          this.finishNode(node, "PrivateIdentifier");
          if (this.privateNameStack.length === 0) {
            this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class");
          } else {
            this.privateNameStack[this.privateNameStack.length - 1].used.push(node);
          }
          return node;
        };
        pp$3.parseYield = function(forInit) {
          if (!this.yieldPos) {
            this.yieldPos = this.start;
          }
          var node = this.startNode();
          this.next();
          if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
            node.delegate = false;
            node.argument = null;
          } else {
            node.delegate = this.eat(types.star);
            node.argument = this.parseMaybeAssign(forInit);
          }
          return this.finishNode(node, "YieldExpression");
        };
        pp$3.parseAwait = function() {
          if (!this.awaitPos) {
            this.awaitPos = this.start;
          }
          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeUnary(null, true);
          return this.finishNode(node, "AwaitExpression");
        };
        var pp$4 = Parser.prototype;
        pp$4.raise = function(pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          err.pos = pos;
          err.loc = loc;
          err.raisedAt = this.pos;
          throw err;
        };
        pp$4.raiseRecoverable = pp$4.raise;
        pp$4.curPosition = function() {
          if (this.options.locations) {
            return new Position(this.curLine, this.pos - this.lineStart);
          }
        };
        var pp$5 = Parser.prototype;
        var Scope = function Scope2(flags) {
          this.flags = flags;
          this.var = [];
          this.lexical = [];
          this.functions = [];
          this.inClassFieldInit = false;
        };
        pp$5.enterScope = function(flags) {
          this.scopeStack.push(new Scope(flags));
        };
        pp$5.exitScope = function() {
          this.scopeStack.pop();
        };
        pp$5.treatFunctionsAsVarInScope = function(scope) {
          return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
        };
        pp$5.declareName = function(name, bindingType, pos) {
          var redeclared = false;
          if (bindingType === BIND_LEXICAL) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
            scope.lexical.push(name);
            if (this.inModule && scope.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
          } else if (bindingType === BIND_SIMPLE_CATCH) {
            var scope$1 = this.currentScope();
            scope$1.lexical.push(name);
          } else if (bindingType === BIND_FUNCTION) {
            var scope$2 = this.currentScope();
            if (this.treatFunctionsAsVar) {
              redeclared = scope$2.lexical.indexOf(name) > -1;
            } else {
              redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
            }
            scope$2.functions.push(name);
          } else {
            for (var i = this.scopeStack.length - 1; i >= 0; --i) {
              var scope$3 = this.scopeStack[i];
              if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
                redeclared = true;
                break;
              }
              scope$3.var.push(name);
              if (this.inModule && scope$3.flags & SCOPE_TOP) {
                delete this.undefinedExports[name];
              }
              if (scope$3.flags & SCOPE_VAR) {
                break;
              }
            }
          }
          if (redeclared) {
            this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
          }
        };
        pp$5.checkLocalExport = function(id) {
          if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
            this.undefinedExports[id.name] = id;
          }
        };
        pp$5.currentScope = function() {
          return this.scopeStack[this.scopeStack.length - 1];
        };
        pp$5.currentVarScope = function() {
          for (var i = this.scopeStack.length - 1; ; i--) {
            var scope = this.scopeStack[i];
            if (scope.flags & SCOPE_VAR) {
              return scope;
            }
          }
        };
        pp$5.currentThisScope = function() {
          for (var i = this.scopeStack.length - 1; ; i--) {
            var scope = this.scopeStack[i];
            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
              return scope;
            }
          }
        };
        var Node = function Node2(parser, pos, loc) {
          this.type = "";
          this.start = pos;
          this.end = 0;
          if (parser.options.locations) {
            this.loc = new SourceLocation(parser, loc);
          }
          if (parser.options.directSourceFile) {
            this.sourceFile = parser.options.directSourceFile;
          }
          if (parser.options.ranges) {
            this.range = [pos, 0];
          }
        };
        var pp$6 = Parser.prototype;
        pp$6.startNode = function() {
          return new Node(this, this.start, this.startLoc);
        };
        pp$6.startNodeAt = function(pos, loc) {
          return new Node(this, pos, loc);
        };
        function finishNodeAt(node, type, pos, loc) {
          node.type = type;
          node.end = pos;
          if (this.options.locations) {
            node.loc.end = loc;
          }
          if (this.options.ranges) {
            node.range[1] = pos;
          }
          return node;
        }
        pp$6.finishNode = function(node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        };
        pp$6.finishNodeAt = function(node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        };
        pp$6.copyNode = function(node) {
          var newNode = new Node(this, node.start, this.startLoc);
          for (var prop in node) {
            newNode[prop] = node[prop];
          }
          return newNode;
        };
        var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
          this.token = token;
          this.isExpr = !!isExpr;
          this.preserveSpace = !!preserveSpace;
          this.override = override;
          this.generator = !!generator;
        };
        var types$1 = {
          b_stat: new TokContext("{", false),
          b_expr: new TokContext("{", true),
          b_tmpl: new TokContext("${", false),
          p_stat: new TokContext("(", false),
          p_expr: new TokContext("(", true),
          q_tmpl: new TokContext("`", true, true, function(p) {
            return p.tryReadTemplateToken();
          }),
          f_stat: new TokContext("function", false),
          f_expr: new TokContext("function", true),
          f_expr_gen: new TokContext("function", true, false, null, true),
          f_gen: new TokContext("function", false, false, null, true)
        };
        var pp$7 = Parser.prototype;
        pp$7.initialContext = function() {
          return [types$1.b_stat];
        };
        pp$7.braceIsBlock = function(prevType) {
          var parent = this.curContext();
          if (parent === types$1.f_expr || parent === types$1.f_stat) {
            return true;
          }
          if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
            return !parent.isExpr;
          }
          if (prevType === types._return || prevType === types.name && this.exprAllowed) {
            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
          }
          if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
            return true;
          }
          if (prevType === types.braceL) {
            return parent === types$1.b_stat;
          }
          if (prevType === types._var || prevType === types._const || prevType === types.name) {
            return false;
          }
          return !this.exprAllowed;
        };
        pp$7.inGeneratorContext = function() {
          for (var i = this.context.length - 1; i >= 1; i--) {
            var context = this.context[i];
            if (context.token === "function") {
              return context.generator;
            }
          }
          return false;
        };
        pp$7.updateContext = function(prevType) {
          var update, type = this.type;
          if (type.keyword && prevType === types.dot) {
            this.exprAllowed = false;
          } else if (update = type.updateContext) {
            update.call(this, prevType);
          } else {
            this.exprAllowed = type.beforeExpr;
          }
        };
        types.parenR.updateContext = types.braceR.updateContext = function() {
          if (this.context.length === 1) {
            this.exprAllowed = true;
            return;
          }
          var out = this.context.pop();
          if (out === types$1.b_stat && this.curContext().token === "function") {
            out = this.context.pop();
          }
          this.exprAllowed = !out.isExpr;
        };
        types.braceL.updateContext = function(prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
          this.exprAllowed = true;
        };
        types.dollarBraceL.updateContext = function() {
          this.context.push(types$1.b_tmpl);
          this.exprAllowed = true;
        };
        types.parenL.updateContext = function(prevType) {
          var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
          this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
          this.exprAllowed = true;
        };
        types.incDec.updateContext = function() {
        };
        types._function.updateContext = types._class.updateContext = function(prevType) {
          if (prevType.beforeExpr && prevType !== types._else && !(prevType === types.semi && this.curContext() !== types$1.p_stat) && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
            this.context.push(types$1.f_expr);
          } else {
            this.context.push(types$1.f_stat);
          }
          this.exprAllowed = false;
        };
        types.backQuote.updateContext = function() {
          if (this.curContext() === types$1.q_tmpl) {
            this.context.pop();
          } else {
            this.context.push(types$1.q_tmpl);
          }
          this.exprAllowed = false;
        };
        types.star.updateContext = function(prevType) {
          if (prevType === types._function) {
            var index = this.context.length - 1;
            if (this.context[index] === types$1.f_expr) {
              this.context[index] = types$1.f_expr_gen;
            } else {
              this.context[index] = types$1.f_gen;
            }
          }
          this.exprAllowed = true;
        };
        types.name.updateContext = function(prevType) {
          var allowed = false;
          if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
            if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
              allowed = true;
            }
          }
          this.exprAllowed = allowed;
        };
        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
        var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
        var ecma11BinaryProperties = ecma10BinaryProperties;
        var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
        var unicodeBinaryProperties = {
          9: ecma9BinaryProperties,
          10: ecma10BinaryProperties,
          11: ecma11BinaryProperties,
          12: ecma12BinaryProperties
        };
        var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
        var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
        var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
        var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
        var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
        var unicodeScriptValues = {
          9: ecma9ScriptValues,
          10: ecma10ScriptValues,
          11: ecma11ScriptValues,
          12: ecma12ScriptValues
        };
        var data = {};
        function buildUnicodeData(ecmaVersion) {
          var d = data[ecmaVersion] = {
            binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
            nonBinary: {
              General_Category: wordsRegexp(unicodeGeneralCategoryValues),
              Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
            }
          };
          d.nonBinary.Script_Extensions = d.nonBinary.Script;
          d.nonBinary.gc = d.nonBinary.General_Category;
          d.nonBinary.sc = d.nonBinary.Script;
          d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }
        buildUnicodeData(9);
        buildUnicodeData(10);
        buildUnicodeData(11);
        buildUnicodeData(12);
        var pp$8 = Parser.prototype;
        var RegExpValidationState = function RegExpValidationState2(parser) {
          this.parser = parser;
          this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "");
          this.unicodeProperties = data[parser.options.ecmaVersion >= 12 ? 12 : parser.options.ecmaVersion];
          this.source = "";
          this.flags = "";
          this.start = 0;
          this.switchU = false;
          this.switchN = false;
          this.pos = 0;
          this.lastIntValue = 0;
          this.lastStringValue = "";
          this.lastAssertionIsQuantifiable = false;
          this.numCapturingParens = 0;
          this.maxBackReference = 0;
          this.groupNames = [];
          this.backReferenceNames = [];
        };
        RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
          var unicode = flags.indexOf("u") !== -1;
          this.start = start | 0;
          this.source = pattern + "";
          this.flags = flags;
          this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
          this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        };
        RegExpValidationState.prototype.raise = function raise(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        };
        RegExpValidationState.prototype.at = function at(i, forceU) {
          if (forceU === void 0)
            forceU = false;
          var s = this.source;
          var l = s.length;
          if (i >= l) {
            return -1;
          }
          var c = s.charCodeAt(i);
          if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l) {
            return c;
          }
          var next = s.charCodeAt(i + 1);
          return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
        };
        RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
          if (forceU === void 0)
            forceU = false;
          var s = this.source;
          var l = s.length;
          if (i >= l) {
            return l;
          }
          var c = s.charCodeAt(i), next;
          if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
            return i + 1;
          }
          return i + 2;
        };
        RegExpValidationState.prototype.current = function current(forceU) {
          if (forceU === void 0)
            forceU = false;
          return this.at(this.pos, forceU);
        };
        RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
          if (forceU === void 0)
            forceU = false;
          return this.at(this.nextIndex(this.pos, forceU), forceU);
        };
        RegExpValidationState.prototype.advance = function advance(forceU) {
          if (forceU === void 0)
            forceU = false;
          this.pos = this.nextIndex(this.pos, forceU);
        };
        RegExpValidationState.prototype.eat = function eat(ch, forceU) {
          if (forceU === void 0)
            forceU = false;
          if (this.current(forceU) === ch) {
            this.advance(forceU);
            return true;
          }
          return false;
        };
        function codePointToString(ch) {
          if (ch <= 65535) {
            return String.fromCharCode(ch);
          }
          ch -= 65536;
          return String.fromCharCode((ch >> 10) + 55296, (ch & 1023) + 56320);
        }
        pp$8.validateRegExpFlags = function(state) {
          var validFlags = state.validFlags;
          var flags = state.flags;
          for (var i = 0; i < flags.length; i++) {
            var flag = flags.charAt(i);
            if (validFlags.indexOf(flag) === -1) {
              this.raise(state.start, "Invalid regular expression flag");
            }
            if (flags.indexOf(flag, i + 1) > -1) {
              this.raise(state.start, "Duplicate regular expression flag");
            }
          }
        };
        pp$8.validateRegExpPattern = function(state) {
          this.regexp_pattern(state);
          if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
            state.switchN = true;
            this.regexp_pattern(state);
          }
        };
        pp$8.regexp_pattern = function(state) {
          state.pos = 0;
          state.lastIntValue = 0;
          state.lastStringValue = "";
          state.lastAssertionIsQuantifiable = false;
          state.numCapturingParens = 0;
          state.maxBackReference = 0;
          state.groupNames.length = 0;
          state.backReferenceNames.length = 0;
          this.regexp_disjunction(state);
          if (state.pos !== state.source.length) {
            if (state.eat(41)) {
              state.raise("Unmatched ')'");
            }
            if (state.eat(93) || state.eat(125)) {
              state.raise("Lone quantifier brackets");
            }
          }
          if (state.maxBackReference > state.numCapturingParens) {
            state.raise("Invalid escape");
          }
          for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
            var name = list[i];
            if (state.groupNames.indexOf(name) === -1) {
              state.raise("Invalid named capture referenced");
            }
          }
        };
        pp$8.regexp_disjunction = function(state) {
          this.regexp_alternative(state);
          while (state.eat(124)) {
            this.regexp_alternative(state);
          }
          if (this.regexp_eatQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }
          if (state.eat(123)) {
            state.raise("Lone quantifier brackets");
          }
        };
        pp$8.regexp_alternative = function(state) {
          while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
          }
        };
        pp$8.regexp_eatTerm = function(state) {
          if (this.regexp_eatAssertion(state)) {
            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
              if (state.switchU) {
                state.raise("Invalid quantifier");
              }
            }
            return true;
          }
          if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
            this.regexp_eatQuantifier(state);
            return true;
          }
          return false;
        };
        pp$8.regexp_eatAssertion = function(state) {
          var start = state.pos;
          state.lastAssertionIsQuantifiable = false;
          if (state.eat(94) || state.eat(36)) {
            return true;
          }
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98)) {
              return true;
            }
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if (this.options.ecmaVersion >= 9) {
              lookbehind = state.eat(60);
            }
            if (state.eat(61) || state.eat(33)) {
              this.regexp_disjunction(state);
              if (!state.eat(41)) {
                state.raise("Unterminated group");
              }
              state.lastAssertionIsQuantifiable = !lookbehind;
              return true;
            }
          }
          state.pos = start;
          return false;
        };
        pp$8.regexp_eatQuantifier = function(state, noError) {
          if (noError === void 0)
            noError = false;
          if (this.regexp_eatQuantifierPrefix(state, noError)) {
            state.eat(63);
            return true;
          }
          return false;
        };
        pp$8.regexp_eatQuantifierPrefix = function(state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        };
        pp$8.regexp_eatBracedQuantifier = function(state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state)) {
              min = state.lastIntValue;
              if (state.eat(44) && this.regexp_eatDecimalDigits(state)) {
                max = state.lastIntValue;
              }
              if (state.eat(125)) {
                if (max !== -1 && max < min && !noError) {
                  state.raise("numbers out of order in {} quantifier");
                }
                return true;
              }
            }
            if (state.switchU && !noError) {
              state.raise("Incomplete quantifier");
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatAtom = function(state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        };
        pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state)) {
              return true;
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatUncapturingGroup = function(state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63) && state.eat(58)) {
              this.regexp_disjunction(state);
              if (state.eat(41)) {
                return true;
              }
              state.raise("Unterminated group");
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatCapturingGroup = function(state) {
          if (state.eat(40)) {
            if (this.options.ecmaVersion >= 9) {
              this.regexp_groupSpecifier(state);
            } else if (state.current() === 63) {
              state.raise("Invalid group");
            }
            this.regexp_disjunction(state);
            if (state.eat(41)) {
              state.numCapturingParens += 1;
              return true;
            }
            state.raise("Unterminated group");
          }
          return false;
        };
        pp$8.regexp_eatExtendedAtom = function(state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        };
        pp$8.regexp_eatInvalidBracedQuantifier = function(state) {
          if (this.regexp_eatBracedQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }
          return false;
        };
        pp$8.regexp_eatSyntaxCharacter = function(state) {
          var ch = state.current();
          if (isSyntaxCharacter(ch)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }
          return false;
        };
        function isSyntaxCharacter(ch) {
          return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        pp$8.regexp_eatPatternCharacters = function(state) {
          var start = state.pos;
          var ch = 0;
          while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
            state.advance();
          }
          return state.pos !== start;
        };
        pp$8.regexp_eatExtendedPatternCharacter = function(state) {
          var ch = state.current();
          if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_groupSpecifier = function(state) {
          if (state.eat(63)) {
            if (this.regexp_eatGroupName(state)) {
              if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
                state.raise("Duplicate capture group name");
              }
              state.groupNames.push(state.lastStringValue);
              return;
            }
            state.raise("Invalid group");
          }
        };
        pp$8.regexp_eatGroupName = function(state) {
          state.lastStringValue = "";
          if (state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) {
              return true;
            }
            state.raise("Invalid capture group name");
          }
          return false;
        };
        pp$8.regexp_eatRegExpIdentifierName = function(state) {
          state.lastStringValue = "";
          if (this.regexp_eatRegExpIdentifierStart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);
            while (this.regexp_eatRegExpIdentifierPart(state)) {
              state.lastStringValue += codePointToString(state.lastIntValue);
            }
            return true;
          }
          return false;
        };
        pp$8.regexp_eatRegExpIdentifierStart = function(state) {
          var start = state.pos;
          var forceU = this.options.ecmaVersion >= 11;
          var ch = state.current(forceU);
          state.advance(forceU);
          if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
            ch = state.lastIntValue;
          }
          if (isRegExpIdentifierStart(ch)) {
            state.lastIntValue = ch;
            return true;
          }
          state.pos = start;
          return false;
        };
        function isRegExpIdentifierStart(ch) {
          return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
        }
        pp$8.regexp_eatRegExpIdentifierPart = function(state) {
          var start = state.pos;
          var forceU = this.options.ecmaVersion >= 11;
          var ch = state.current(forceU);
          state.advance(forceU);
          if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
            ch = state.lastIntValue;
          }
          if (isRegExpIdentifierPart(ch)) {
            state.lastIntValue = ch;
            return true;
          }
          state.pos = start;
          return false;
        };
        function isRegExpIdentifierPart(ch) {
          return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
        }
        pp$8.regexp_eatAtomEscape = function(state) {
          if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
            return true;
          }
          if (state.switchU) {
            if (state.current() === 99) {
              state.raise("Invalid unicode escape");
            }
            state.raise("Invalid escape");
          }
          return false;
        };
        pp$8.regexp_eatBackReference = function(state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;
            if (state.switchU) {
              if (n > state.maxBackReference) {
                state.maxBackReference = n;
              }
              return true;
            }
            if (n <= state.numCapturingParens) {
              return true;
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatKGroupName = function(state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state)) {
              state.backReferenceNames.push(state.lastStringValue);
              return true;
            }
            state.raise("Invalid named reference");
          }
          return false;
        };
        pp$8.regexp_eatCharacterEscape = function(state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        };
        pp$8.regexp_eatCControlLetter = function(state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state)) {
              return true;
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatZero = function(state) {
          if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
            state.lastIntValue = 0;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatControlEscape = function(state) {
          var ch = state.current();
          if (ch === 116) {
            state.lastIntValue = 9;
            state.advance();
            return true;
          }
          if (ch === 110) {
            state.lastIntValue = 10;
            state.advance();
            return true;
          }
          if (ch === 118) {
            state.lastIntValue = 11;
            state.advance();
            return true;
          }
          if (ch === 102) {
            state.lastIntValue = 12;
            state.advance();
            return true;
          }
          if (ch === 114) {
            state.lastIntValue = 13;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatControlLetter = function(state) {
          var ch = state.current();
          if (isControlLetter(ch)) {
            state.lastIntValue = ch % 32;
            state.advance();
            return true;
          }
          return false;
        };
        function isControlLetter(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
          if (forceU === void 0)
            forceU = false;
          var start = state.pos;
          var switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343) {
                    state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
                    return true;
                  }
                }
                state.pos = leadSurrogateEnd;
                state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && isValidUnicode(state.lastIntValue)) {
              return true;
            }
            if (switchU) {
              state.raise("Invalid unicode escape");
            }
            state.pos = start;
          }
          return false;
        };
        function isValidUnicode(ch) {
          return ch >= 0 && ch <= 1114111;
        }
        pp$8.regexp_eatIdentityEscape = function(state) {
          if (state.switchU) {
            if (this.regexp_eatSyntaxCharacter(state)) {
              return true;
            }
            if (state.eat(47)) {
              state.lastIntValue = 47;
              return true;
            }
            return false;
          }
          var ch = state.current();
          if (ch !== 99 && (!state.switchN || ch !== 107)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatDecimalEscape = function(state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
              state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        };
        pp$8.regexp_eatCharacterClassEscape = function(state) {
          var ch = state.current();
          if (isCharacterClassEscape(ch)) {
            state.lastIntValue = -1;
            state.advance();
            return true;
          }
          if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 80 || ch === 112)) {
            state.lastIntValue = -1;
            state.advance();
            if (state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125)) {
              return true;
            }
            state.raise("Invalid property name");
          }
          return false;
        };
        function isCharacterClassEscape(ch) {
          return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
        }
        pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value = state.lastStringValue;
              this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
              return true;
            }
          }
          state.pos = start;
          if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
            return true;
          }
          return false;
        };
        pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
          if (!has(state.unicodeProperties.nonBinary, name)) {
            state.raise("Invalid property name");
          }
          if (!state.unicodeProperties.nonBinary[name].test(value)) {
            state.raise("Invalid property value");
          }
        };
        pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
          if (!state.unicodeProperties.binary.test(nameOrValue)) {
            state.raise("Invalid property name");
          }
        };
        pp$8.regexp_eatUnicodePropertyName = function(state) {
          var ch = 0;
          state.lastStringValue = "";
          while (isUnicodePropertyNameCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }
          return state.lastStringValue !== "";
        };
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || ch === 95;
        }
        pp$8.regexp_eatUnicodePropertyValue = function(state) {
          var ch = 0;
          state.lastStringValue = "";
          while (isUnicodePropertyValueCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }
          return state.lastStringValue !== "";
        };
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }
        pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
          return this.regexp_eatUnicodePropertyValue(state);
        };
        pp$8.regexp_eatCharacterClass = function(state) {
          if (state.eat(91)) {
            state.eat(94);
            this.regexp_classRanges(state);
            if (state.eat(93)) {
              return true;
            }
            state.raise("Unterminated character class");
          }
          return false;
        };
        pp$8.regexp_classRanges = function(state) {
          while (this.regexp_eatClassAtom(state)) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              if (state.switchU && (left === -1 || right === -1)) {
                state.raise("Invalid character class");
              }
              if (left !== -1 && right !== -1 && left > right) {
                state.raise("Range out of order in character class");
              }
            }
          }
        };
        pp$8.regexp_eatClassAtom = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state)) {
              return true;
            }
            if (state.switchU) {
              var ch$1 = state.current();
              if (ch$1 === 99 || isOctalDigit(ch$1)) {
                state.raise("Invalid class escape");
              }
              state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          if (ch !== 93) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatClassEscape = function(state) {
          var start = state.pos;
          if (state.eat(98)) {
            state.lastIntValue = 8;
            return true;
          }
          if (state.switchU && state.eat(45)) {
            state.lastIntValue = 45;
            return true;
          }
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state)) {
              return true;
            }
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        };
        pp$8.regexp_eatClassControlLetter = function(state) {
          var ch = state.current();
          if (isDecimalDigit(ch) || ch === 95) {
            state.lastIntValue = ch % 32;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatHexEscapeSequence = function(state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) {
              return true;
            }
            if (state.switchU) {
              state.raise("Invalid escape");
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatDecimalDigits = function(state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;
          while (isDecimalDigit(ch = state.current())) {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
            state.advance();
          }
          return state.pos !== start;
        };
        function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        pp$8.regexp_eatHexDigits = function(state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;
          while (isHexDigit(ch = state.current())) {
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }
          return state.pos !== start;
        };
        function isHexDigit(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt(ch) {
          if (ch >= 65 && ch <= 70) {
            return 10 + (ch - 65);
          }
          if (ch >= 97 && ch <= 102) {
            return 10 + (ch - 97);
          }
          return ch - 48;
        }
        pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
                state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
              } else {
                state.lastIntValue = n1 * 8 + n2;
              }
            } else {
              state.lastIntValue = n1;
            }
            return true;
          }
          return false;
        };
        pp$8.regexp_eatOctalDigit = function(state) {
          var ch = state.current();
          if (isOctalDigit(ch)) {
            state.lastIntValue = ch - 48;
            state.advance();
            return true;
          }
          state.lastIntValue = 0;
          return false;
        };
        function isOctalDigit(ch) {
          return ch >= 48 && ch <= 55;
        }
        pp$8.regexp_eatFixedHexDigits = function(state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i = 0; i < length; ++i) {
            var ch = state.current();
            if (!isHexDigit(ch)) {
              state.pos = start;
              return false;
            }
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }
          return true;
        };
        var Token = function Token2(p) {
          this.type = p.type;
          this.value = p.value;
          this.start = p.start;
          this.end = p.end;
          if (p.options.locations) {
            this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
          }
          if (p.options.ranges) {
            this.range = [p.start, p.end];
          }
        };
        var pp$9 = Parser.prototype;
        pp$9.next = function(ignoreEscapeSequenceInKeyword) {
          if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
          }
          if (this.options.onToken) {
            this.options.onToken(new Token(this));
          }
          this.lastTokEnd = this.end;
          this.lastTokStart = this.start;
          this.lastTokEndLoc = this.endLoc;
          this.lastTokStartLoc = this.startLoc;
          this.nextToken();
        };
        pp$9.getToken = function() {
          this.next();
          return new Token(this);
        };
        if (typeof Symbol !== "undefined") {
          pp$9[Symbol.iterator] = function() {
            var this$1 = this;
            return {
              next: function() {
                var token = this$1.getToken();
                return {
                  done: token.type === types.eof,
                  value: token
                };
              }
            };
          };
        }
        pp$9.curContext = function() {
          return this.context[this.context.length - 1];
        };
        pp$9.nextToken = function() {
          var curContext = this.curContext();
          if (!curContext || !curContext.preserveSpace) {
            this.skipSpace();
          }
          this.start = this.pos;
          if (this.options.locations) {
            this.startLoc = this.curPosition();
          }
          if (this.pos >= this.input.length) {
            return this.finishToken(types.eof);
          }
          if (curContext.override) {
            return curContext.override(this);
          } else {
            this.readToken(this.fullCharCodeAtPos());
          }
        };
        pp$9.readToken = function(code) {
          if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
            return this.readWord();
          }
          return this.getTokenFromCode(code);
        };
        pp$9.fullCharCodeAtPos = function() {
          var code = this.input.charCodeAt(this.pos);
          if (code <= 55295 || code >= 56320) {
            return code;
          }
          var next = this.input.charCodeAt(this.pos + 1);
          return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
        };
        pp$9.skipBlockComment = function() {
          var startLoc = this.options.onComment && this.curPosition();
          var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
          if (end === -1) {
            this.raise(this.pos - 2, "Unterminated comment");
          }
          this.pos = end + 2;
          if (this.options.locations) {
            lineBreakG.lastIndex = start;
            var match;
            while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
              ++this.curLine;
              this.lineStart = match.index + match[0].length;
            }
          }
          if (this.options.onComment) {
            this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
          }
        };
        pp$9.skipLineComment = function(startSkip) {
          var start = this.pos;
          var startLoc = this.options.onComment && this.curPosition();
          var ch = this.input.charCodeAt(this.pos += startSkip);
          while (this.pos < this.input.length && !isNewLine(ch)) {
            ch = this.input.charCodeAt(++this.pos);
          }
          if (this.options.onComment) {
            this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
          }
        };
        pp$9.skipSpace = function() {
          loop:
            while (this.pos < this.input.length) {
              var ch = this.input.charCodeAt(this.pos);
              switch (ch) {
                case 32:
                case 160:
                  ++this.pos;
                  break;
                case 13:
                  if (this.input.charCodeAt(this.pos + 1) === 10) {
                    ++this.pos;
                  }
                case 10:
                case 8232:
                case 8233:
                  ++this.pos;
                  if (this.options.locations) {
                    ++this.curLine;
                    this.lineStart = this.pos;
                  }
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.pos + 1)) {
                    case 42:
                      this.skipBlockComment();
                      break;
                    case 47:
                      this.skipLineComment(2);
                      break;
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                    ++this.pos;
                  } else {
                    break loop;
                  }
              }
            }
        };
        pp$9.finishToken = function(type, val) {
          this.end = this.pos;
          if (this.options.locations) {
            this.endLoc = this.curPosition();
          }
          var prevType = this.type;
          this.type = type;
          this.value = val;
          this.updateContext(prevType);
        };
        pp$9.readToken_dot = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next >= 48 && next <= 57) {
            return this.readNumber(true);
          }
          var next2 = this.input.charCodeAt(this.pos + 2);
          if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
            this.pos += 3;
            return this.finishToken(types.ellipsis);
          } else {
            ++this.pos;
            return this.finishToken(types.dot);
          }
        };
        pp$9.readToken_slash = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (this.exprAllowed) {
            ++this.pos;
            return this.readRegexp();
          }
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(types.slash, 1);
        };
        pp$9.readToken_mult_modulo_exp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;
          var tokentype = code === 42 ? types.star : types.modulo;
          if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
            ++size;
            tokentype = types.starstar;
            next = this.input.charCodeAt(this.pos + 2);
          }
          if (next === 61) {
            return this.finishOp(types.assign, size + 1);
          }
          return this.finishOp(tokentype, size);
        };
        pp$9.readToken_pipe_amp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 === 61) {
                return this.finishOp(types.assign, 3);
              }
            }
            return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
          }
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
        };
        pp$9.readToken_caret = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(types.bitwiseXOR, 1);
        };
        pp$9.readToken_plus_min = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
              this.skipLineComment(3);
              this.skipSpace();
              return this.nextToken();
            }
            return this.finishOp(types.incDec, 2);
          }
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(types.plusMin, 1);
        };
        pp$9.readToken_lt_gt = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;
          if (next === code) {
            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
            if (this.input.charCodeAt(this.pos + size) === 61) {
              return this.finishOp(types.assign, size + 1);
            }
            return this.finishOp(types.bitShift, size);
          }
          if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
            this.skipLineComment(4);
            this.skipSpace();
            return this.nextToken();
          }
          if (next === 61) {
            size = 2;
          }
          return this.finishOp(types.relational, size);
        };
        pp$9.readToken_eq_excl = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 61) {
            return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
          }
          if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
            this.pos += 2;
            return this.finishToken(types.arrow);
          }
          return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
        };
        pp$9.readToken_question = function() {
          var ecmaVersion = this.options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 46) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 < 48 || next2 > 57) {
                return this.finishOp(types.questionDot, 2);
              }
            }
            if (next === 63) {
              if (ecmaVersion >= 12) {
                var next2$1 = this.input.charCodeAt(this.pos + 2);
                if (next2$1 === 61) {
                  return this.finishOp(types.assign, 3);
                }
              }
              return this.finishOp(types.coalesce, 2);
            }
          }
          return this.finishOp(types.question, 1);
        };
        pp$9.readToken_numberSign = function() {
          var ecmaVersion = this.options.ecmaVersion;
          var code = 35;
          if (ecmaVersion >= 13) {
            ++this.pos;
            code = this.fullCharCodeAtPos();
            if (isIdentifierStart(code, true) || code === 92) {
              return this.finishToken(types.privateId, this.readWord1());
            }
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
        };
        pp$9.getTokenFromCode = function(code) {
          switch (code) {
            case 46:
              return this.readToken_dot();
            case 40:
              ++this.pos;
              return this.finishToken(types.parenL);
            case 41:
              ++this.pos;
              return this.finishToken(types.parenR);
            case 59:
              ++this.pos;
              return this.finishToken(types.semi);
            case 44:
              ++this.pos;
              return this.finishToken(types.comma);
            case 91:
              ++this.pos;
              return this.finishToken(types.bracketL);
            case 93:
              ++this.pos;
              return this.finishToken(types.bracketR);
            case 123:
              ++this.pos;
              return this.finishToken(types.braceL);
            case 125:
              ++this.pos;
              return this.finishToken(types.braceR);
            case 58:
              ++this.pos;
              return this.finishToken(types.colon);
            case 96:
              if (this.options.ecmaVersion < 6) {
                break;
              }
              ++this.pos;
              return this.finishToken(types.backQuote);
            case 48:
              var next = this.input.charCodeAt(this.pos + 1);
              if (next === 120 || next === 88) {
                return this.readRadixNumber(16);
              }
              if (this.options.ecmaVersion >= 6) {
                if (next === 111 || next === 79) {
                  return this.readRadixNumber(8);
                }
                if (next === 98 || next === 66) {
                  return this.readRadixNumber(2);
                }
              }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);
            case 34:
            case 39:
              return this.readString(code);
            case 47:
              return this.readToken_slash();
            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);
            case 124:
            case 38:
              return this.readToken_pipe_amp(code);
            case 94:
              return this.readToken_caret();
            case 43:
            case 45:
              return this.readToken_plus_min(code);
            case 60:
            case 62:
              return this.readToken_lt_gt(code);
            case 61:
            case 33:
              return this.readToken_eq_excl(code);
            case 63:
              return this.readToken_question();
            case 126:
              return this.finishOp(types.prefix, 1);
            case 35:
              return this.readToken_numberSign();
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
        };
        pp$9.finishOp = function(type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          this.pos += size;
          return this.finishToken(type, str);
        };
        pp$9.readRegexp = function() {
          var escaped, inClass, start = this.pos;
          for (; ; ) {
            if (this.pos >= this.input.length) {
              this.raise(start, "Unterminated regular expression");
            }
            var ch = this.input.charAt(this.pos);
            if (lineBreak.test(ch)) {
              this.raise(start, "Unterminated regular expression");
            }
            if (!escaped) {
              if (ch === "[") {
                inClass = true;
              } else if (ch === "]" && inClass) {
                inClass = false;
              } else if (ch === "/" && !inClass) {
                break;
              }
              escaped = ch === "\\";
            } else {
              escaped = false;
            }
            ++this.pos;
          }
          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos;
          var flags = this.readWord1();
          if (this.containsEsc) {
            this.unexpected(flagsStart);
          }
          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags);
          this.validateRegExpFlags(state);
          this.validateRegExpPattern(state);
          var value = null;
          try {
            value = new RegExp(pattern, flags);
          } catch (e) {
          }
          return this.finishToken(types.regexp, { pattern, flags, value });
        };
        pp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
          var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
          var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
          var start = this.pos, total = 0, lastCode = 0;
          for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
            var code = this.input.charCodeAt(this.pos), val = void 0;
            if (allowSeparators && code === 95) {
              if (isLegacyOctalNumericLiteral) {
                this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
              }
              if (lastCode === 95) {
                this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
              }
              if (i === 0) {
                this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
              }
              lastCode = code;
              continue;
            }
            if (code >= 97) {
              val = code - 97 + 10;
            } else if (code >= 65) {
              val = code - 65 + 10;
            } else if (code >= 48 && code <= 57) {
              val = code - 48;
            } else {
              val = Infinity;
            }
            if (val >= radix) {
              break;
            }
            lastCode = code;
            total = total * radix + val;
          }
          if (allowSeparators && lastCode === 95) {
            this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
          }
          if (this.pos === start || len != null && this.pos - start !== len) {
            return null;
          }
          return total;
        };
        function stringToNumber(str, isLegacyOctalNumericLiteral) {
          if (isLegacyOctalNumericLiteral) {
            return parseInt(str, 8);
          }
          return parseFloat(str.replace(/_/g, ""));
        }
        function stringToBigInt(str) {
          if (typeof BigInt !== "function") {
            return null;
          }
          return BigInt(str.replace(/_/g, ""));
        }
        pp$9.readRadixNumber = function(radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);
          if (val == null) {
            this.raise(this.start + 2, "Expected number in radix " + radix);
          }
          if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
            val = stringToBigInt(this.input.slice(start, this.pos));
            ++this.pos;
          } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }
          return this.finishToken(types.num, val);
        };
        pp$9.readNumber = function(startsWithDot) {
          var start = this.pos;
          if (!startsWithDot && this.readInt(10, void 0, true) === null) {
            this.raise(start, "Invalid number");
          }
          var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
          if (octal && this.strict) {
            this.raise(start, "Invalid number");
          }
          var next = this.input.charCodeAt(this.pos);
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
            var val$1 = stringToBigInt(this.input.slice(start, this.pos));
            ++this.pos;
            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise(this.pos, "Identifier directly after number");
            }
            return this.finishToken(types.num, val$1);
          }
          if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
            octal = false;
          }
          if (next === 46 && !octal) {
            ++this.pos;
            this.readInt(10);
            next = this.input.charCodeAt(this.pos);
          }
          if ((next === 69 || next === 101) && !octal) {
            next = this.input.charCodeAt(++this.pos);
            if (next === 43 || next === 45) {
              ++this.pos;
            }
            if (this.readInt(10) === null) {
              this.raise(start, "Invalid number");
            }
          }
          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }
          var val = stringToNumber(this.input.slice(start, this.pos), octal);
          return this.finishToken(types.num, val);
        };
        pp$9.readCodePoint = function() {
          var ch = this.input.charCodeAt(this.pos), code;
          if (ch === 123) {
            if (this.options.ecmaVersion < 6) {
              this.unexpected();
            }
            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
            ++this.pos;
            if (code > 1114111) {
              this.invalidStringToken(codePos, "Code point out of bounds");
            }
          } else {
            code = this.readHexChar(4);
          }
          return code;
        };
        function codePointToString$1(code) {
          if (code <= 65535) {
            return String.fromCharCode(code);
          }
          code -= 65536;
          return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
        }
        pp$9.readString = function(quote) {
          var out = "", chunkStart = ++this.pos;
          for (; ; ) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated string constant");
            }
            var ch = this.input.charCodeAt(this.pos);
            if (ch === quote) {
              break;
            }
            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(false);
              chunkStart = this.pos;
            } else {
              if (isNewLine(ch, this.options.ecmaVersion >= 10)) {
                this.raise(this.start, "Unterminated string constant");
              }
              ++this.pos;
            }
          }
          out += this.input.slice(chunkStart, this.pos++);
          return this.finishToken(types.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR = {};
        pp$9.tryReadTemplateToken = function() {
          this.inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
              this.readInvalidTemplateToken();
            } else {
              throw err;
            }
          }
          this.inTemplateElement = false;
        };
        pp$9.invalidStringToken = function(position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
            throw INVALID_TEMPLATE_ESCAPE_ERROR;
          } else {
            this.raise(position, message);
          }
        };
        pp$9.readTmplToken = function() {
          var out = "", chunkStart = this.pos;
          for (; ; ) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated template");
            }
            var ch = this.input.charCodeAt(this.pos);
            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
              if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
                if (ch === 36) {
                  this.pos += 2;
                  return this.finishToken(types.dollarBraceL);
                } else {
                  ++this.pos;
                  return this.finishToken(types.backQuote);
                }
              }
              out += this.input.slice(chunkStart, this.pos);
              return this.finishToken(types.template, out);
            }
            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(true);
              chunkStart = this.pos;
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.pos);
              ++this.pos;
              switch (ch) {
                case 13:
                  if (this.input.charCodeAt(this.pos) === 10) {
                    ++this.pos;
                  }
                case 10:
                  out += "\n";
                  break;
                default:
                  out += String.fromCharCode(ch);
                  break;
              }
              if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
              }
              chunkStart = this.pos;
            } else {
              ++this.pos;
            }
          }
        };
        pp$9.readInvalidTemplateToken = function() {
          for (; this.pos < this.input.length; this.pos++) {
            switch (this.input[this.pos]) {
              case "\\":
                ++this.pos;
                break;
              case "$":
                if (this.input[this.pos + 1] !== "{") {
                  break;
                }
              case "`":
                return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));
            }
          }
          this.raise(this.start, "Unterminated template");
        };
        pp$9.readEscapedChar = function(inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          ++this.pos;
          switch (ch) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 120:
              return String.fromCharCode(this.readHexChar(2));
            case 117:
              return codePointToString$1(this.readCodePoint());
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 13:
              if (this.input.charCodeAt(this.pos) === 10) {
                ++this.pos;
              }
            case 10:
              if (this.options.locations) {
                this.lineStart = this.pos;
                ++this.curLine;
              }
              return "";
            case 56:
            case 57:
              if (this.strict) {
                this.invalidStringToken(this.pos - 1, "Invalid escape sequence");
              }
              if (inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
                return null;
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                var octal = parseInt(octalStr, 8);
                if (octal > 255) {
                  octalStr = octalStr.slice(0, -1);
                  octal = parseInt(octalStr, 8);
                }
                this.pos += octalStr.length - 1;
                ch = this.input.charCodeAt(this.pos);
                if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                  this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
                }
                return String.fromCharCode(octal);
              }
              if (isNewLine(ch)) {
                return "";
              }
              return String.fromCharCode(ch);
          }
        };
        pp$9.readHexChar = function(len) {
          var codePos = this.pos;
          var n = this.readInt(16, len);
          if (n === null) {
            this.invalidStringToken(codePos, "Bad character escape sequence");
          }
          return n;
        };
        pp$9.readWord1 = function() {
          this.containsEsc = false;
          var word = "", first = true, chunkStart = this.pos;
          var astral = this.options.ecmaVersion >= 6;
          while (this.pos < this.input.length) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar(ch, astral)) {
              this.pos += ch <= 65535 ? 1 : 2;
            } else if (ch === 92) {
              this.containsEsc = true;
              word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;
              if (this.input.charCodeAt(++this.pos) !== 117) {
                this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
              }
              ++this.pos;
              var esc = this.readCodePoint();
              if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                this.invalidStringToken(escStart, "Invalid Unicode escape");
              }
              word += codePointToString$1(esc);
              chunkStart = this.pos;
            } else {
              break;
            }
            first = false;
          }
          return word + this.input.slice(chunkStart, this.pos);
        };
        pp$9.readWord = function() {
          var word = this.readWord1();
          var type = types.name;
          if (this.keywords.test(word)) {
            type = keywords$1[word];
          }
          return this.finishToken(type, word);
        };
        var version = "8.4.0";
        Parser.acorn = {
          Parser,
          version,
          defaultOptions,
          Position,
          SourceLocation,
          getLineInfo,
          Node,
          TokenType,
          tokTypes: types,
          keywordTypes: keywords$1,
          TokContext,
          tokContexts: types$1,
          isIdentifierChar,
          isIdentifierStart,
          Token,
          isNewLine,
          lineBreak,
          lineBreakG,
          nonASCIIwhitespace
        };
        function parse(input, options) {
          return Parser.parse(input, options);
        }
        function parseExpressionAt(input, pos, options) {
          return Parser.parseExpressionAt(input, pos, options);
        }
        function tokenizer(input, options) {
          return Parser.tokenizer(input, options);
        }
        exports2.Node = Node;
        exports2.Parser = Parser;
        exports2.Position = Position;
        exports2.SourceLocation = SourceLocation;
        exports2.TokContext = TokContext;
        exports2.Token = Token;
        exports2.TokenType = TokenType;
        exports2.defaultOptions = defaultOptions;
        exports2.getLineInfo = getLineInfo;
        exports2.isIdentifierChar = isIdentifierChar;
        exports2.isIdentifierStart = isIdentifierStart;
        exports2.isNewLine = isNewLine;
        exports2.keywordTypes = keywords$1;
        exports2.lineBreak = lineBreak;
        exports2.lineBreakG = lineBreakG;
        exports2.nonASCIIwhitespace = nonASCIIwhitespace;
        exports2.parse = parse;
        exports2.parseExpressionAt = parseExpressionAt;
        exports2.tokContexts = types$1;
        exports2.tokTypes = types;
        exports2.tokenizer = tokenizer;
        exports2.version = version;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/acorn-jsx/xhtml.js
  var require_xhtml = __commonJS({
    "node_modules/acorn-jsx/xhtml.js"(exports, module) {
      module.exports = {
        quot: '"',
        amp: "&",
        apos: "'",
        lt: "<",
        gt: ">",
        nbsp: "\xA0",
        iexcl: "\xA1",
        cent: "\xA2",
        pound: "\xA3",
        curren: "\xA4",
        yen: "\xA5",
        brvbar: "\xA6",
        sect: "\xA7",
        uml: "\xA8",
        copy: "\xA9",
        ordf: "\xAA",
        laquo: "\xAB",
        not: "\xAC",
        shy: "\xAD",
        reg: "\xAE",
        macr: "\xAF",
        deg: "\xB0",
        plusmn: "\xB1",
        sup2: "\xB2",
        sup3: "\xB3",
        acute: "\xB4",
        micro: "\xB5",
        para: "\xB6",
        middot: "\xB7",
        cedil: "\xB8",
        sup1: "\xB9",
        ordm: "\xBA",
        raquo: "\xBB",
        frac14: "\xBC",
        frac12: "\xBD",
        frac34: "\xBE",
        iquest: "\xBF",
        Agrave: "\xC0",
        Aacute: "\xC1",
        Acirc: "\xC2",
        Atilde: "\xC3",
        Auml: "\xC4",
        Aring: "\xC5",
        AElig: "\xC6",
        Ccedil: "\xC7",
        Egrave: "\xC8",
        Eacute: "\xC9",
        Ecirc: "\xCA",
        Euml: "\xCB",
        Igrave: "\xCC",
        Iacute: "\xCD",
        Icirc: "\xCE",
        Iuml: "\xCF",
        ETH: "\xD0",
        Ntilde: "\xD1",
        Ograve: "\xD2",
        Oacute: "\xD3",
        Ocirc: "\xD4",
        Otilde: "\xD5",
        Ouml: "\xD6",
        times: "\xD7",
        Oslash: "\xD8",
        Ugrave: "\xD9",
        Uacute: "\xDA",
        Ucirc: "\xDB",
        Uuml: "\xDC",
        Yacute: "\xDD",
        THORN: "\xDE",
        szlig: "\xDF",
        agrave: "\xE0",
        aacute: "\xE1",
        acirc: "\xE2",
        atilde: "\xE3",
        auml: "\xE4",
        aring: "\xE5",
        aelig: "\xE6",
        ccedil: "\xE7",
        egrave: "\xE8",
        eacute: "\xE9",
        ecirc: "\xEA",
        euml: "\xEB",
        igrave: "\xEC",
        iacute: "\xED",
        icirc: "\xEE",
        iuml: "\xEF",
        eth: "\xF0",
        ntilde: "\xF1",
        ograve: "\xF2",
        oacute: "\xF3",
        ocirc: "\xF4",
        otilde: "\xF5",
        ouml: "\xF6",
        divide: "\xF7",
        oslash: "\xF8",
        ugrave: "\xF9",
        uacute: "\xFA",
        ucirc: "\xFB",
        uuml: "\xFC",
        yacute: "\xFD",
        thorn: "\xFE",
        yuml: "\xFF",
        OElig: "\u0152",
        oelig: "\u0153",
        Scaron: "\u0160",
        scaron: "\u0161",
        Yuml: "\u0178",
        fnof: "\u0192",
        circ: "\u02C6",
        tilde: "\u02DC",
        Alpha: "\u0391",
        Beta: "\u0392",
        Gamma: "\u0393",
        Delta: "\u0394",
        Epsilon: "\u0395",
        Zeta: "\u0396",
        Eta: "\u0397",
        Theta: "\u0398",
        Iota: "\u0399",
        Kappa: "\u039A",
        Lambda: "\u039B",
        Mu: "\u039C",
        Nu: "\u039D",
        Xi: "\u039E",
        Omicron: "\u039F",
        Pi: "\u03A0",
        Rho: "\u03A1",
        Sigma: "\u03A3",
        Tau: "\u03A4",
        Upsilon: "\u03A5",
        Phi: "\u03A6",
        Chi: "\u03A7",
        Psi: "\u03A8",
        Omega: "\u03A9",
        alpha: "\u03B1",
        beta: "\u03B2",
        gamma: "\u03B3",
        delta: "\u03B4",
        epsilon: "\u03B5",
        zeta: "\u03B6",
        eta: "\u03B7",
        theta: "\u03B8",
        iota: "\u03B9",
        kappa: "\u03BA",
        lambda: "\u03BB",
        mu: "\u03BC",
        nu: "\u03BD",
        xi: "\u03BE",
        omicron: "\u03BF",
        pi: "\u03C0",
        rho: "\u03C1",
        sigmaf: "\u03C2",
        sigma: "\u03C3",
        tau: "\u03C4",
        upsilon: "\u03C5",
        phi: "\u03C6",
        chi: "\u03C7",
        psi: "\u03C8",
        omega: "\u03C9",
        thetasym: "\u03D1",
        upsih: "\u03D2",
        piv: "\u03D6",
        ensp: "\u2002",
        emsp: "\u2003",
        thinsp: "\u2009",
        zwnj: "\u200C",
        zwj: "\u200D",
        lrm: "\u200E",
        rlm: "\u200F",
        ndash: "\u2013",
        mdash: "\u2014",
        lsquo: "\u2018",
        rsquo: "\u2019",
        sbquo: "\u201A",
        ldquo: "\u201C",
        rdquo: "\u201D",
        bdquo: "\u201E",
        dagger: "\u2020",
        Dagger: "\u2021",
        bull: "\u2022",
        hellip: "\u2026",
        permil: "\u2030",
        prime: "\u2032",
        Prime: "\u2033",
        lsaquo: "\u2039",
        rsaquo: "\u203A",
        oline: "\u203E",
        frasl: "\u2044",
        euro: "\u20AC",
        image: "\u2111",
        weierp: "\u2118",
        real: "\u211C",
        trade: "\u2122",
        alefsym: "\u2135",
        larr: "\u2190",
        uarr: "\u2191",
        rarr: "\u2192",
        darr: "\u2193",
        harr: "\u2194",
        crarr: "\u21B5",
        lArr: "\u21D0",
        uArr: "\u21D1",
        rArr: "\u21D2",
        dArr: "\u21D3",
        hArr: "\u21D4",
        forall: "\u2200",
        part: "\u2202",
        exist: "\u2203",
        empty: "\u2205",
        nabla: "\u2207",
        isin: "\u2208",
        notin: "\u2209",
        ni: "\u220B",
        prod: "\u220F",
        sum: "\u2211",
        minus: "\u2212",
        lowast: "\u2217",
        radic: "\u221A",
        prop: "\u221D",
        infin: "\u221E",
        ang: "\u2220",
        and: "\u2227",
        or: "\u2228",
        cap: "\u2229",
        cup: "\u222A",
        "int": "\u222B",
        there4: "\u2234",
        sim: "\u223C",
        cong: "\u2245",
        asymp: "\u2248",
        ne: "\u2260",
        equiv: "\u2261",
        le: "\u2264",
        ge: "\u2265",
        sub: "\u2282",
        sup: "\u2283",
        nsub: "\u2284",
        sube: "\u2286",
        supe: "\u2287",
        oplus: "\u2295",
        otimes: "\u2297",
        perp: "\u22A5",
        sdot: "\u22C5",
        lceil: "\u2308",
        rceil: "\u2309",
        lfloor: "\u230A",
        rfloor: "\u230B",
        lang: "\u2329",
        rang: "\u232A",
        loz: "\u25CA",
        spades: "\u2660",
        clubs: "\u2663",
        hearts: "\u2665",
        diams: "\u2666"
      };
    }
  });

  // node_modules/acorn-jsx/index.js
  var require_acorn_jsx = __commonJS({
    "node_modules/acorn-jsx/index.js"(exports, module) {
      "use strict";
      var XHTMLEntities = require_xhtml();
      var hexNumber = /^[\da-fA-F]+$/;
      var decimalNumber = /^\d+$/;
      var acornJsxMap = new WeakMap();
      function getJsxTokens(acorn) {
        acorn = acorn.Parser.acorn || acorn;
        let acornJsx = acornJsxMap.get(acorn);
        if (!acornJsx) {
          const tt = acorn.tokTypes;
          const TokContext = acorn.TokContext;
          const TokenType = acorn.TokenType;
          const tc_oTag = new TokContext("<tag", false);
          const tc_cTag = new TokContext("</tag", false);
          const tc_expr = new TokContext("<tag>...</tag>", true, true);
          const tokContexts = {
            tc_oTag,
            tc_cTag,
            tc_expr
          };
          const tokTypes = {
            jsxName: new TokenType("jsxName"),
            jsxText: new TokenType("jsxText", { beforeExpr: true }),
            jsxTagStart: new TokenType("jsxTagStart", { startsExpr: true }),
            jsxTagEnd: new TokenType("jsxTagEnd")
          };
          tokTypes.jsxTagStart.updateContext = function() {
            this.context.push(tc_expr);
            this.context.push(tc_oTag);
            this.exprAllowed = false;
          };
          tokTypes.jsxTagEnd.updateContext = function(prevType) {
            let out = this.context.pop();
            if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
              this.context.pop();
              this.exprAllowed = this.curContext() === tc_expr;
            } else {
              this.exprAllowed = true;
            }
          };
          acornJsx = { tokContexts, tokTypes };
          acornJsxMap.set(acorn, acornJsx);
        }
        return acornJsx;
      }
      function getQualifiedJSXName(object) {
        if (!object)
          return object;
        if (object.type === "JSXIdentifier")
          return object.name;
        if (object.type === "JSXNamespacedName")
          return object.namespace.name + ":" + object.name.name;
        if (object.type === "JSXMemberExpression")
          return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
      }
      module.exports = function(options) {
        options = options || {};
        return function(Parser) {
          return plugin({
            allowNamespaces: options.allowNamespaces !== false,
            allowNamespacedObjects: !!options.allowNamespacedObjects
          }, Parser);
        };
      };
      Object.defineProperty(module.exports, "tokTypes", {
        get: function get_tokTypes() {
          return getJsxTokens(require_acorn()).tokTypes;
        },
        configurable: true,
        enumerable: true
      });
      function plugin(options, Parser) {
        const acorn = Parser.acorn || require_acorn();
        const acornJsx = getJsxTokens(acorn);
        const tt = acorn.tokTypes;
        const tok = acornJsx.tokTypes;
        const tokContexts = acorn.tokContexts;
        const tc_oTag = acornJsx.tokContexts.tc_oTag;
        const tc_cTag = acornJsx.tokContexts.tc_cTag;
        const tc_expr = acornJsx.tokContexts.tc_expr;
        const isNewLine = acorn.isNewLine;
        const isIdentifierStart = acorn.isIdentifierStart;
        const isIdentifierChar = acorn.isIdentifierChar;
        return class extends Parser {
          static get acornJsx() {
            return acornJsx;
          }
          jsx_readToken() {
            let out = "", chunkStart = this.pos;
            for (; ; ) {
              if (this.pos >= this.input.length)
                this.raise(this.start, "Unterminated JSX contents");
              let ch = this.input.charCodeAt(this.pos);
              switch (ch) {
                case 60:
                case 123:
                  if (this.pos === this.start) {
                    if (ch === 60 && this.exprAllowed) {
                      ++this.pos;
                      return this.finishToken(tok.jsxTagStart);
                    }
                    return this.getTokenFromCode(ch);
                  }
                  out += this.input.slice(chunkStart, this.pos);
                  return this.finishToken(tok.jsxText, out);
                case 38:
                  out += this.input.slice(chunkStart, this.pos);
                  out += this.jsx_readEntity();
                  chunkStart = this.pos;
                  break;
                case 62:
                case 125:
                  this.raise(this.pos, "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" + (ch === 62 ? "&gt;" : "&rbrace;") + '` or `{"' + this.input[this.pos] + '"}`?');
                default:
                  if (isNewLine(ch)) {
                    out += this.input.slice(chunkStart, this.pos);
                    out += this.jsx_readNewLine(true);
                    chunkStart = this.pos;
                  } else {
                    ++this.pos;
                  }
              }
            }
          }
          jsx_readNewLine(normalizeCRLF) {
            let ch = this.input.charCodeAt(this.pos);
            let out;
            ++this.pos;
            if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
              out = normalizeCRLF ? "\n" : "\r\n";
            } else {
              out = String.fromCharCode(ch);
            }
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            return out;
          }
          jsx_readString(quote) {
            let out = "", chunkStart = ++this.pos;
            for (; ; ) {
              if (this.pos >= this.input.length)
                this.raise(this.start, "Unterminated string constant");
              let ch = this.input.charCodeAt(this.pos);
              if (ch === quote)
                break;
              if (ch === 38) {
                out += this.input.slice(chunkStart, this.pos);
                out += this.jsx_readEntity();
                chunkStart = this.pos;
              } else if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.pos);
                out += this.jsx_readNewLine(false);
                chunkStart = this.pos;
              } else {
                ++this.pos;
              }
            }
            out += this.input.slice(chunkStart, this.pos++);
            return this.finishToken(tt.string, out);
          }
          jsx_readEntity() {
            let str = "", count = 0, entity;
            let ch = this.input[this.pos];
            if (ch !== "&")
              this.raise(this.pos, "Entity must start with an ampersand");
            let startPos = ++this.pos;
            while (this.pos < this.input.length && count++ < 10) {
              ch = this.input[this.pos++];
              if (ch === ";") {
                if (str[0] === "#") {
                  if (str[1] === "x") {
                    str = str.substr(2);
                    if (hexNumber.test(str))
                      entity = String.fromCharCode(parseInt(str, 16));
                  } else {
                    str = str.substr(1);
                    if (decimalNumber.test(str))
                      entity = String.fromCharCode(parseInt(str, 10));
                  }
                } else {
                  entity = XHTMLEntities[str];
                }
                break;
              }
              str += ch;
            }
            if (!entity) {
              this.pos = startPos;
              return "&";
            }
            return entity;
          }
          jsx_readWord() {
            let ch, start = this.pos;
            do {
              ch = this.input.charCodeAt(++this.pos);
            } while (isIdentifierChar(ch) || ch === 45);
            return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));
          }
          jsx_parseIdentifier() {
            let node = this.startNode();
            if (this.type === tok.jsxName)
              node.name = this.value;
            else if (this.type.keyword)
              node.name = this.type.keyword;
            else
              this.unexpected();
            this.next();
            return this.finishNode(node, "JSXIdentifier");
          }
          jsx_parseNamespacedName() {
            let startPos = this.start, startLoc = this.startLoc;
            let name = this.jsx_parseIdentifier();
            if (!options.allowNamespaces || !this.eat(tt.colon))
              return name;
            var node = this.startNodeAt(startPos, startLoc);
            node.namespace = name;
            node.name = this.jsx_parseIdentifier();
            return this.finishNode(node, "JSXNamespacedName");
          }
          jsx_parseElementName() {
            if (this.type === tok.jsxTagEnd)
              return "";
            let startPos = this.start, startLoc = this.startLoc;
            let node = this.jsx_parseNamespacedName();
            if (this.type === tt.dot && node.type === "JSXNamespacedName" && !options.allowNamespacedObjects) {
              this.unexpected();
            }
            while (this.eat(tt.dot)) {
              let newNode = this.startNodeAt(startPos, startLoc);
              newNode.object = node;
              newNode.property = this.jsx_parseIdentifier();
              node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsx_parseAttributeValue() {
            switch (this.type) {
              case tt.braceL:
                let node = this.jsx_parseExpressionContainer();
                if (node.expression.type === "JSXEmptyExpression")
                  this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
                return node;
              case tok.jsxTagStart:
              case tt.string:
                return this.parseExprAtom();
              default:
                this.raise(this.start, "JSX value should be either an expression or a quoted JSX text");
            }
          }
          jsx_parseEmptyExpression() {
            let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
          }
          jsx_parseExpressionContainer() {
            let node = this.startNode();
            this.next();
            node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
            this.expect(tt.braceR);
            return this.finishNode(node, "JSXExpressionContainer");
          }
          jsx_parseAttribute() {
            let node = this.startNode();
            if (this.eat(tt.braceL)) {
              this.expect(tt.ellipsis);
              node.argument = this.parseMaybeAssign();
              this.expect(tt.braceR);
              return this.finishNode(node, "JSXSpreadAttribute");
            }
            node.name = this.jsx_parseNamespacedName();
            node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
            return this.finishNode(node, "JSXAttribute");
          }
          jsx_parseOpeningElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            node.attributes = [];
            let nodeName = this.jsx_parseElementName();
            if (nodeName)
              node.name = nodeName;
            while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)
              node.attributes.push(this.jsx_parseAttribute());
            node.selfClosing = this.eat(tt.slash);
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? "JSXOpeningElement" : "JSXOpeningFragment");
          }
          jsx_parseClosingElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let nodeName = this.jsx_parseElementName();
            if (nodeName)
              node.name = nodeName;
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? "JSXClosingElement" : "JSXClosingFragment");
          }
          jsx_parseElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let children = [];
            let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents:
                for (; ; ) {
                  switch (this.type) {
                    case tok.jsxTagStart:
                      startPos = this.start;
                      startLoc = this.startLoc;
                      this.next();
                      if (this.eat(tt.slash)) {
                        closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
                        break contents;
                      }
                      children.push(this.jsx_parseElementAt(startPos, startLoc));
                      break;
                    case tok.jsxText:
                      children.push(this.parseExprAtom());
                      break;
                    case tt.braceL:
                      children.push(this.jsx_parseExpressionContainer());
                      break;
                    default:
                      this.unexpected();
                  }
                }
              if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
              }
            }
            let fragmentOrElement = openingElement.name ? "Element" : "Fragment";
            node["opening" + fragmentOrElement] = openingElement;
            node["closing" + fragmentOrElement] = closingElement;
            node.children = children;
            if (this.type === tt.relational && this.value === "<") {
              this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
            }
            return this.finishNode(node, "JSX" + fragmentOrElement);
          }
          jsx_parseText() {
            let node = this.parseLiteral(this.value);
            node.type = "JSXText";
            return node;
          }
          jsx_parseElement() {
            let startPos = this.start, startLoc = this.startLoc;
            this.next();
            return this.jsx_parseElementAt(startPos, startLoc);
          }
          parseExprAtom(refShortHandDefaultPos) {
            if (this.type === tok.jsxText)
              return this.jsx_parseText();
            else if (this.type === tok.jsxTagStart)
              return this.jsx_parseElement();
            else
              return super.parseExprAtom(refShortHandDefaultPos);
          }
          readToken(code) {
            let context = this.curContext();
            if (context === tc_expr)
              return this.jsx_readToken();
            if (context === tc_oTag || context === tc_cTag) {
              if (isIdentifierStart(code))
                return this.jsx_readWord();
              if (code == 62) {
                ++this.pos;
                return this.finishToken(tok.jsxTagEnd);
              }
              if ((code === 34 || code === 39) && context == tc_oTag)
                return this.jsx_readString(code);
            }
            if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
              ++this.pos;
              return this.finishToken(tok.jsxTagStart);
            }
            return super.readToken(code);
          }
          updateContext(prevType) {
            if (this.type == tt.braceL) {
              var curContext = this.curContext();
              if (curContext == tc_oTag)
                this.context.push(tokContexts.b_expr);
              else if (curContext == tc_expr)
                this.context.push(tokContexts.b_tmpl);
              else
                super.updateContext(prevType);
              this.exprAllowed = true;
            } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
              this.context.length -= 2;
              this.context.push(tc_cTag);
              this.exprAllowed = false;
            } else {
              return super.updateContext(prevType);
            }
          }
        };
      }
    }
  });

  // lib/estree-walker/walker.js
  var require_walker = __commonJS({
    "lib/estree-walker/walker.js"(exports, module) {
      var WalkerBase = class {
        constructor() {
          this.should_skip = false;
          this.should_remove = false;
          this.replacement = null;
          this.context = {
            skip: () => this.should_skip = true,
            remove: () => this.should_remove = true,
            replace: (node) => this.replacement = node
          };
        }
        replace(parent, prop, index, node) {
          if (parent) {
            if (index !== null) {
              parent[prop][index] = node;
            } else {
              parent[prop] = node;
            }
          }
        }
        remove(parent, prop, index) {
          if (parent) {
            if (index !== null) {
              parent[prop].splice(index, 1);
            } else {
              delete parent[prop];
            }
          }
        }
      };
      module.exports = { WalkerBase };
    }
  });

  // lib/estree-walker/sync.js
  var require_sync = __commonJS({
    "lib/estree-walker/sync.js"(exports, module) {
      var { WalkerBase } = require_walker();
      var SyncWalker = class extends WalkerBase {
        constructor(enter, leave) {
          super();
          this.enter = enter;
          this.leave = leave;
        }
        visit(node, parent, prop, index) {
          if (node) {
            if (this.enter) {
              const _should_skip = this.should_skip;
              const _should_remove = this.should_remove;
              const _replacement = this.replacement;
              this.should_skip = false;
              this.should_remove = false;
              this.replacement = null;
              this.enter.call(this.context, node, parent, prop, index);
              if (this.replacement) {
                node = this.replacement;
                this.replace(parent, prop, index, node);
              }
              if (this.should_remove) {
                this.remove(parent, prop, index);
              }
              const skipped = this.should_skip;
              const removed = this.should_remove;
              this.should_skip = _should_skip;
              this.should_remove = _should_remove;
              this.replacement = _replacement;
              if (skipped)
                return node;
              if (removed)
                return null;
            }
            for (const key in node) {
              const value = node[key];
              if (typeof value !== "object") {
                continue;
              } else if (Array.isArray(value)) {
                for (let i = 0; i < value.length; i += 1) {
                  if (value[i] !== null && typeof value[i].type === "string") {
                    if (!this.visit(value[i], node, key, i)) {
                      i--;
                    }
                  }
                }
              } else if (value !== null && typeof value.type === "string") {
                this.visit(value, node, key, null);
              }
            }
            if (this.leave) {
              const _replacement = this.replacement;
              const _should_remove = this.should_remove;
              this.replacement = null;
              this.should_remove = false;
              this.leave.call(this.context, node, parent, prop, index);
              if (this.replacement) {
                node = this.replacement;
                this.replace(parent, prop, index, node);
              }
              if (this.should_remove) {
                this.remove(parent, prop, index);
              }
              const removed = this.should_remove;
              this.replacement = _replacement;
              this.should_remove = _should_remove;
              if (removed)
                return null;
            }
          }
          return node;
        }
      };
      module.exports = { SyncWalker };
    }
  });

  // lib/estree-walker/async.js
  var require_async = __commonJS({
    "lib/estree-walker/async.js"(exports, module) {
      var { WalkerBase } = require_walker();
      var AsyncWalker = class extends WalkerBase {
        constructor(enter, leave) {
          super();
          this.enter = enter;
          this.leave = leave;
        }
        async visit(node, parent, prop, index) {
          if (node) {
            if (this.enter) {
              const _should_skip = this.should_skip;
              const _should_remove = this.should_remove;
              const _replacement = this.replacement;
              this.should_skip = false;
              this.should_remove = false;
              this.replacement = null;
              await this.enter.call(this.context, node, parent, prop, index);
              if (this.replacement) {
                node = this.replacement;
                this.replace(parent, prop, index, node);
              }
              if (this.should_remove) {
                this.remove(parent, prop, index);
              }
              const skipped = this.should_skip;
              const removed = this.should_remove;
              this.should_skip = _should_skip;
              this.should_remove = _should_remove;
              this.replacement = _replacement;
              if (skipped)
                return node;
              if (removed)
                return null;
            }
            for (const key in node) {
              const value = node[key];
              if (typeof value !== "object") {
                continue;
              } else if (Array.isArray(value)) {
                for (let i = 0; i < value.length; i += 1) {
                  if (value[i] !== null && typeof value[i].type === "string") {
                    if (!await this.visit(value[i], node, key, i)) {
                      i--;
                    }
                  }
                }
              } else if (value !== null && typeof value.type === "string") {
                await this.visit(value, node, key, null);
              }
            }
            if (this.leave) {
              const _replacement = this.replacement;
              const _should_remove = this.should_remove;
              this.replacement = null;
              this.should_remove = false;
              await this.leave.call(this.context, node, parent, prop, index);
              if (this.replacement) {
                node = this.replacement;
                this.replace(parent, prop, index, node);
              }
              if (this.should_remove) {
                this.remove(parent, prop, index);
              }
              const removed = this.should_remove;
              this.replacement = _replacement;
              this.should_remove = _should_remove;
              if (removed)
                return null;
            }
          }
          return node;
        }
      };
      module.exports = { AsyncWalker };
    }
  });

  // lib/estree-walker/index.js
  var require_estree_walker = __commonJS({
    "lib/estree-walker/index.js"(exports, module) {
      var { SyncWalker } = require_sync();
      var { AsyncWalker } = require_async();
      function walk(ast, { enter, leave }) {
        const instance = new SyncWalker(enter, leave);
        return instance.visit(ast, null);
      }
      async function asyncWalk(ast, { enter, leave }) {
        const instance = new AsyncWalker(enter, leave);
        return await instance.visit(ast, null);
      }
      module.exports = {
        walk,
        asyncWalk
      };
    }
  });

  // lib/estree-util-is-identifier-name/regex.js
  var require_regex = __commonJS({
    "lib/estree-util-is-identifier-name/regex.js"(exports, module) {
      var start = /[$A-Z_a-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
      var cont = /[\d\u00B7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F]/;
      module.exports = { start, cont };
    }
  });

  // lib/estree-util-is-identifier-name/index.js
  var require_estree_util_is_identifier_name = __commonJS({
    "lib/estree-util-is-identifier-name/index.js"(exports, module) {
      var { start: startRe, cont: contRe } = require_regex();
      function start(code) {
        return startRe.test(String.fromCharCode(code));
      }
      function cont(code) {
        var character = String.fromCharCode(code);
        return startRe.test(character) || contRe.test(character);
      }
      function name(name2) {
        var index = -1;
        while (++index < name2.length) {
          if (!(index ? cont : start)(name2.charCodeAt(index)))
            return false;
        }
        return index > 0;
      }
      module.exports = {
        start,
        cont,
        name
      };
    }
  });

  // lib/estree-util-build-jsx/index.js
  var require_estree_util_build_jsx = __commonJS({
    "lib/estree-util-build-jsx/index.js"(exports, module) {
      var { walk } = require_estree_walker();
      var { name: isIdentifierName } = require_estree_util_is_identifier_name();
      var regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\s+(\S+)/g;
      module.exports = buildJsx;
      function buildJsx(tree, options = {}) {
        var automatic = options.runtime === "automatic";
        var annotations = {};
        var imports = {};
        walk(tree, { enter, leave });
        return tree;
        function enter(node) {
          var comments;
          var index;
          var match;
          if (node.type === "Program") {
            comments = node.comments || [];
            index = -1;
            while (++index < comments.length) {
              regex.lastIndex = 0;
              while (match = regex.exec(comments[index].value)) {
                annotations[match[1]] = match[2];
              }
            }
            if (annotations.jsxRuntime) {
              if (annotations.jsxRuntime === "automatic") {
                automatic = true;
                if (annotations.jsx) {
                  throw new Error("Unexpected `@jsx` pragma w/ automatic runtime");
                }
                if (annotations.jsxFrag) {
                  throw new Error("Unexpected `@jsxFrag` pragma w/ automatic runtime");
                }
              } else if (annotations.jsxRuntime === "classic") {
                automatic = false;
                if (annotations.jsxImportSource) {
                  throw new Error("Unexpected `@jsxImportSource` w/ classic runtime");
                }
              } else {
                throw new Error("Unexpected `jsxRuntime` `" + annotations.jsxRuntime + "`, expected `automatic` or `classic`");
              }
            }
          }
        }
        function leave(node) {
          var parameters = [];
          var children = [];
          var objects = [];
          var fields = [];
          var index = -1;
          var child;
          var name;
          var props;
          var attributes;
          var attribute;
          var spread;
          var key;
          var callee;
          var specifiers;
          var prop;
          var value;
          if (node.type === "Program") {
            specifiers = [];
            if (imports.fragment) {
              specifiers.push({
                type: "ImportSpecifier",
                imported: { type: "Identifier", name: "Fragment" },
                local: { type: "Identifier", name: "_Fragment" }
              });
            }
            if (imports.jsx) {
              specifiers.push({
                type: "ImportSpecifier",
                imported: { type: "Identifier", name: "jsx" },
                local: { type: "Identifier", name: "_jsx" }
              });
            }
            if (imports.jsxs) {
              specifiers.push({
                type: "ImportSpecifier",
                imported: { type: "Identifier", name: "jsxs" },
                local: { type: "Identifier", name: "_jsxs" }
              });
            }
            if (specifiers.length > 0) {
              node.body.unshift({
                type: "ImportDeclaration",
                specifiers,
                source: {
                  type: "Literal",
                  value: (annotations.jsxImportSource || options.importSource || "react") + "/jsx-runtime"
                }
              });
            }
          }
          if (node.type !== "JSXElement" && node.type !== "JSXFragment") {
            return;
          }
          while (++index < node.children.length) {
            child = node.children[index];
            if (child.type === "JSXExpressionContainer") {
              if (child.expression.type !== "JSXEmptyExpression") {
                children.push(child.expression);
              }
            } else if (child.type === "JSXText") {
              value = child.value.replace(/\t/g, " ").replace(/ *(\r?\n|\r) */g, "\n").replace(/\n+/g, "\n").replace(/\n+$/, "").replace(/\n/g, " ");
              if (value) {
                children.push(create(child, { type: "Literal", value }));
              }
            } else {
              children.push(child);
            }
          }
          if (node.type === "JSXElement") {
            name = toIdentifier(node.openingElement.name);
            if (name.type === "Identifier" && /^[a-z]/.test(name.name)) {
              name = create(name, { type: "Literal", value: name.name });
            }
            attributes = node.openingElement.attributes;
            index = -1;
            while (++index < attributes.length) {
              attribute = attributes[index];
              if (attribute.type === "JSXSpreadAttribute") {
                if (fields.length > 0) {
                  objects.push({ type: "ObjectExpression", properties: fields });
                  fields = [];
                }
                objects.push(attribute.argument);
                spread = true;
              } else {
                prop = toProperty(attribute);
                if (automatic && prop.key.type === "Identifier" && prop.key.name === "key") {
                  if (spread) {
                    throw new Error("Expected `key` to come before any spread expressions");
                  }
                  key = prop.value;
                } else {
                  fields.push(prop);
                }
              }
            }
          } else if (automatic) {
            imports.fragment = true;
            name = { type: "Identifier", name: "_Fragment" };
          } else {
            name = toMemberExpression(annotations.jsxFrag || options.pragmaFrag || "React.Fragment");
          }
          if (automatic && children.length > 0) {
            fields.push({
              type: "Property",
              key: { type: "Identifier", name: "children" },
              value: children.length > 1 ? { type: "ArrayExpression", elements: children } : children[0],
              kind: "init",
              method: false,
              shorthand: false,
              computed: false
            });
          } else {
            parameters = children;
          }
          if (fields.length > 0) {
            objects.push({ type: "ObjectExpression", properties: fields });
          }
          if (objects.length > 1) {
            if (objects[0].type !== "ObjectExpression") {
              objects.unshift({ type: "ObjectExpression", properties: [] });
            }
            props = {
              type: "CallExpression",
              callee: toMemberExpression("Object.assign"),
              arguments: objects,
              optional: false
            };
          } else if (objects.length > 0) {
            props = objects[0];
          }
          if (automatic) {
            if (children.length > 1) {
              imports.jsxs = true;
              callee = { type: "Identifier", name: "_jsxs" };
            } else {
              imports.jsx = true;
              callee = { type: "Identifier", name: "_jsx" };
            }
            parameters.push(props || { type: "ObjectExpression", properties: [] });
            if (key) {
              parameters.push(key);
            }
          } else {
            if (props || parameters.length > 0) {
              parameters.unshift(props || { type: "Literal", value: null });
            }
            callee = toMemberExpression(annotations.jsx || options.pragma || "React.createElement");
          }
          parameters.unshift(name);
          this.replace(create(node, {
            type: "CallExpression",
            callee,
            arguments: parameters,
            optional: false
          }));
        }
      }
      function toProperty(node) {
        var value;
        if (node.value) {
          if (node.value.type === "JSXExpressionContainer") {
            value = node.value.expression;
          } else {
            value = node.value;
            delete value.raw;
          }
        } else {
          value = { type: "Literal", value: true };
        }
        return create(node, {
          type: "Property",
          key: toIdentifier(node.name),
          value,
          kind: "init",
          method: false,
          shorthand: false,
          computed: false
        });
      }
      function toIdentifier(node) {
        var replace;
        var id;
        if (node.type === "JSXMemberExpression") {
          id = toIdentifier(node.property);
          replace = {
            type: "MemberExpression",
            object: toIdentifier(node.object),
            property: id,
            computed: id.type === "Literal",
            optional: false
          };
        } else if (node.type === "JSXNamespacedName") {
          replace = {
            type: "Literal",
            value: node.namespace.name + ":" + node.name.name
          };
        } else {
          replace = isIdentifierName(node.name) ? { type: "Identifier", name: node.name } : { type: "Literal", value: node.name };
        }
        return create(node, replace);
      }
      function toMemberExpression(id) {
        var identifiers = id.split(".");
        var index = -1;
        var result;
        var prop;
        while (++index < identifiers.length) {
          prop = isIdentifierName(identifiers[index]) ? { type: "Identifier", name: identifiers[index] } : { type: "Literal", value: identifiers[index] };
          result = index ? {
            type: "MemberExpression",
            object: result,
            property: prop,
            computed: index && prop.type === "Literal",
            optional: false
          } : prop;
        }
        return result;
      }
      function create(from, node) {
        var fields = ["start", "end", "loc", "range", "comments"];
        var index = -1;
        var field;
        while (++index < fields.length) {
          field = fields[index];
          if (field in from) {
            node[field] = from[field];
          }
        }
        return node;
      }
    }
  });

  // parse/defaultOptions.js
  var require_defaultOptions = __commonJS({
    "parse/defaultOptions.js"(exports, module) {
      var parserDefaultOptions = {
        ecmaVersion: "latest",
        ranges: true,
        locations: true,
        allowReturnOutsideFunction: true
      };
      module.exports = parserDefaultOptions;
    }
  });

  // parse/jsx.js
  var require_jsx = __commonJS({
    "parse/jsx.js"(exports, module) {
      var { Parser } = require_acorn();
      var acornJsx = require_acorn_jsx();
      var buildJsx = require_estree_util_build_jsx();
      var defaultOptions = require_defaultOptions();
      var parser = Parser.extend(acornJsx());
      function parse(code, options = {}) {
        const tree = parser.parse(code, {
          ...defaultOptions,
          ...options
        });
        buildJsx(tree);
        return tree;
      }
      module.exports = parse;
    }
  });

  // evaluate/messages.js
  var require_messages = __commonJS({
    "evaluate/messages.js"(exports, module) {
      var ThrowError = class extends Error {
      };
      var ThrowSyntaxError = class extends SyntaxError {
      };
      var ThrowReferenceError = class extends ReferenceError {
      };
      var ThrowTypeError = class extends TypeError {
      };
      var InterruptThrowError = class extends ThrowError {
      };
      var InterruptThrowSyntaxError = class extends ThrowSyntaxError {
      };
      var InterruptThrowReferenceError = class extends ThrowReferenceError {
      };
      var Messages = {
        UnknownError: [3001, "%0", InterruptThrowError],
        ExecutionTimeOutError: [3002, "Script execution timed out after %0ms", InterruptThrowError],
        MaxStepsError: [3003, "Reached maximum number of steps %0", InterruptThrowError],
        NodeTypeSyntaxError: [1001, "Unknown node type: %0", InterruptThrowReferenceError],
        BinaryOperatorSyntaxError: [1002, "Unknown binary operator: %0", InterruptThrowReferenceError],
        LogicalOperatorSyntaxError: [
          1003,
          "Unknown logical operator: %0",
          InterruptThrowReferenceError
        ],
        UnaryOperatorSyntaxError: [1004, "Unknown unary operator: %0", InterruptThrowReferenceError],
        UpdateOperatorSyntaxError: [1005, "Unknown update operator: %0", InterruptThrowReferenceError],
        ObjectStructureSyntaxError: [
          1006,
          "Unknown object structure: %0",
          InterruptThrowReferenceError
        ],
        AssignmentExpressionSyntaxError: [
          1007,
          "Unknown assignment expression: %0",
          InterruptThrowReferenceError
        ],
        VariableTypeSyntaxError: [1008, "Unknown variable type: %0", InterruptThrowReferenceError],
        ParamTypeSyntaxError: [1009, "Unknown param type: %0", InterruptThrowReferenceError],
        AssignmentTypeSyntaxError: [1010, "Unknown assignment type: %0", InterruptThrowReferenceError],
        FunctionUndefinedReferenceError: [2001, "%0 is not a function", ThrowReferenceError],
        VariableUndefinedReferenceError: [2002, "%0 is not defined", ThrowReferenceError],
        IsNotConstructor: [2003, "%0 is not a constructor", ThrowTypeError],
        LetVariableUseBeforeInitReferenceError: [2004, "Cannot access '%0' before initialization", ThrowReferenceError],
        RedeclareBlockScopeVariableError: [2005, "Cannot redeclare block-scoped variable '%0'", ThrowReferenceError],
        ConstNotInitError: [2006, "const '%0' declarations must be initialized.", InterruptThrowError],
        ConstChangeError: [2007, "Cannot assign to '%0' because it is a constant.", ThrowReferenceError],
        BuiltInPrototypeChangeError: [2007, "Cannot modify prototype of '%0' because it is a built-in object.", ThrowReferenceError],
        UnknownVariableDeclTypeError: [2008, "Unknown Vaiable Declarator type '%0'.", InterruptThrowReferenceError],
        SpreadPatternVariableNoInit: [2009, "no init in Rest Pattern Variable.", InterruptThrowReferenceError],
        NormalError: [2010, "%0", ThrowReferenceError],
        VariableNotIterableError: [2011, "variable '%0' not iterable.", ThrowTypeError]
      };
      module.exports = {
        ThrowError,
        ThrowSyntaxError,
        ThrowReferenceError,
        ThrowTypeError,
        InterruptThrowError,
        InterruptThrowSyntaxError,
        InterruptThrowReferenceError,
        Messages
      };
    }
  });

  // evaluate/interpreter.js
  var require_interpreter = __commonJS({
    "evaluate/interpreter.js"(exports, module) {
      var {
        Messages,
        InterruptThrowError,
        InterruptThrowReferenceError,
        InterruptThrowSyntaxError
      } = require_messages();
      function defineFunctionName(func, name) {
        Object.defineProperty(func, "name", {
          value: name,
          writable: false,
          enumerable: false,
          configurable: true
        });
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var Break = Symbol("Break");
      var Continue = Symbol("Continue");
      var DefaultCase = Symbol("DefaultCase");
      var EmptyStatementReturn = Symbol("EmptyStatementReturn");
      var WithScopeName = Symbol("WithScopeName");
      var SuperScopeName = Symbol("SuperScopeName");
      var RootScopeName = Symbol("RootScopeName");
      var GlobalScopeName = Symbol("GlobalScopeName");
      function isSymbol(t) {
        return typeof t == "symbol";
      }
      var memberKeyPrefix = "__smbl_";
      function storeKey(t) {
        return `${memberKeyPrefix}${t.offset}_${t.val}`;
      }
      function isFunction(func) {
        return typeof func === "function";
      }
      var InternalInterpreterReflection = class {
        constructor(interpreter) {
          this.interpreter = interpreter;
        }
        generator() {
          const interpreter = this.interpreter;
          function getCurrentScope() {
            return this.getCurrentScope();
          }
          function getGlobalScope() {
            return this.getGlobalScope();
          }
          function getCurrentContext() {
            return this.getCurrentContext();
          }
          return {
            getOptions: interpreter.getOptions.bind(interpreter),
            getCurrentScope: getCurrentScope.bind(interpreter),
            getGlobalScope: getGlobalScope.bind(interpreter),
            getCurrentContext: getCurrentContext.bind(interpreter),
            getExecStartTime: interpreter.getExecStartTime.bind(interpreter)
          };
        }
      };
      function internalEval(reflection, code, useGlobalScope = true) {
        if (!(reflection instanceof InternalInterpreterReflection)) {
          throw new Error("Illegal call");
        }
        if (typeof code !== "string")
          return code;
        if (!code)
          return void 0;
        const instance = reflection.generator();
        const opts = instance.getOptions();
        const options = {
          timeout: opts.timeout,
          _initEnv: function() {
            if (!useGlobalScope) {
              this.setCurrentContext(instance.getCurrentContext());
            }
            this.execStartTime = instance.getExecStartTime();
            this.execEndTime = this.execStartTime;
            this.step = instance.step;
          }
        };
        const currentScope = useGlobalScope ? instance.getGlobalScope() : instance.getCurrentScope();
        const interpreter = new Interpreter(currentScope, options);
        return interpreter.evaluate(code);
      }
      Object.defineProperty(internalEval, "__IS_EVAL_FUNC", {
        value: true,
        writable: false,
        enumerable: false,
        configurable: false
      });
      function internalFunction(reflection, ...params) {
        if (!(reflection instanceof InternalInterpreterReflection)) {
          throw new Error("Illegal call");
        }
        const instance = reflection.generator();
        const code = params.pop();
        const interpreter = new Interpreter(instance.getGlobalScope(), instance.getOptions());
        const wrapCode = `(function anonymous(${params.join(",")}) { ${code} });`;
        return interpreter.evaluate(wrapCode);
      }
      Object.defineProperty(internalFunction, "__IS_FUNCTION_FUNC", {
        value: true,
        writable: false,
        enumerable: false,
        configurable: false
      });
      var Return = class {
        constructor(value) {
          this.value = value;
        }
      };
      var BreakLabel = class {
        constructor(value) {
          this.value = value;
        }
      };
      var ContinueLabel = class {
        constructor(value) {
          this.value = value;
        }
      };
      var Scope = class {
        constructor(data, parent = null, name, type = "function") {
          this.name = name;
          this.parent = parent;
          this.data = data;
          this.labelStack = [];
          this.type = type;
          this.lexDeclared = Object.create(null);
        }
      };
      function noop() {
      }
      function createScope(parent = null, name, type) {
        return new Scope(Object.create(null), parent, name, type);
      }
      function createRootContext(data) {
        return Object.create(data);
      }
      var BuildInObjects = {
        NaN: NaN,
        Infinity: Infinity,
        Object,
        Array,
        String,
        Boolean,
        Number,
        Date,
        RegExp,
        Error,
        URIError,
        TypeError,
        RangeError,
        SyntaxError,
        ReferenceError,
        Math,
        parseInt,
        parseFloat,
        isNaN,
        isFinite,
        decodeURI,
        decodeURIComponent,
        encodeURI,
        encodeURIComponent,
        escape,
        unescape,
        undefined: void 0,
        eval: internalEval,
        Function: internalFunction
      };
      if (typeof JSON !== "undefined") {
        BuildInObjects.JSON = JSON;
      }
      if (typeof Promise !== "undefined") {
        BuildInObjects.Promise = Promise;
      }
      if (typeof Set !== "undefined") {
        BuildInObjects.Set = Set;
      }
      if (typeof Map !== "undefined") {
        BuildInObjects.Map = Map;
      }
      if (typeof Symbol !== "undefined") {
        BuildInObjects.Symbol = Symbol;
      }
      if (typeof Proxy !== "undefined") {
        BuildInObjects.Proxy = Proxy;
      }
      if (typeof WeakMap !== "undefined") {
        BuildInObjects.WeakMap = WeakMap;
      }
      if (typeof WeakSet !== "undefined") {
        BuildInObjects.WeakSet = WeakSet;
      }
      if (typeof Reflect !== "undefined") {
        BuildInObjects.Reflect = Reflect;
      }
      var globalOrWindow = typeof window !== "undefined" ? window : global;
      function setKeyVal(_this, item, val) {
        let keyval;
        let sbl = false;
        if (item.name.computed) {
          let t = item.name.value();
          if (isSymbol(t)) {
            sbl = true;
            keyval = storeKey(t);
          } else {
            keyval = t;
          }
        } else {
          keyval = item.name.value;
        }
        if (sbl) {
          Object.defineProperty(_this, keyval, {
            value: val,
            writable: true,
            enumerable: false,
            configurable: true
          });
        } else {
          _this[keyval] = val;
        }
      }
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      function __extend(child, father) {
        extendStatics(child, father);
        function __() {
          this.constructor = father;
        }
        child.prototype = father === null ? Object.create(father) : (__.prototype = father.prototype, new __());
      }
      var Interpreter = class {
        constructor(context, options) {
          if (context === false)
            return;
          this.reset(context, options);
        }
        reset(context = Interpreter.global, options = {}) {
          this.parse = options.parse || this.parse || function() {
            throw new Error("Undefined parse method");
          };
          this.timeout = options.timeout != null ? options.timeout : 100;
          this.maxSteps = typeof options.maxSteps !== "undefined" ? options.maxStep : 1024;
          this.options = {
            ecmaVersion: options.ecmaVersion || Interpreter.ecmaVersion,
            rootContext: options.rootContext,
            globalContextInFunction: options.globalContextInFunction === void 0 ? Interpreter.globalContextInFunction : options.globalContextInFunction,
            _initEnv: options._initEnv,
            parse: this.parse,
            timeout: this.timeout,
            maxSteps: this.maxSteps,
            source: options.source
          };
          this.context = context || Object.create(null);
          this.callStack = [];
          this.lastExecNode = null;
          this.isRunning = false;
          this.execStartTime = Date.now();
          this.execEndTime = this.execStartTime;
          this.step = 0;
          const ctx = this.context;
          let scope;
          if (ctx instanceof Scope) {
            scope = ctx;
          } else {
            let rootScope = null;
            const superScope = this.createSuperScope(ctx);
            if (this.options.rootContext) {
              rootScope = new Scope(createRootContext(this.options.rootContext), superScope, RootScopeName);
            }
            scope = new Scope(ctx, rootScope || superScope, GlobalScopeName);
          }
          this.globalScope = scope;
          this.currentScope = this.globalScope;
          this.globalContext = scope.data;
          this.currentContext = scope.data;
          this.collectDeclVars = Object.create(null);
          this.collectDeclFuncs = Object.create(null);
          this.collectDeclLex = [];
          this.isVarDeclMode = false;
          const _initEnv = this.options._initEnv;
          if (_initEnv) {
            _initEnv.call(this);
          }
          return this;
        }
        getExecStartTime() {
          return this.execStartTime;
        }
        getExecutionTime() {
          return this.execEndTime - this.execStartTime;
        }
        setExecTimeout(timeout = 0) {
          this.this.timeout = timeout;
        }
        getOptions() {
          return this.options;
        }
        getGlobalScope() {
          return this.globalScope;
        }
        getCurrentScope() {
          return this.currentScope;
        }
        getCurrentContext() {
          return this.currentContext;
        }
        isInterruptThrow(err) {
          return err instanceof InterruptThrowError || err instanceof InterruptThrowReferenceError || err instanceof InterruptThrowSyntaxError;
        }
        isBuiltInObject(obj) {
          for (const globalKey in BuildInObjects) {
            if (obj === BuildInObjects[globalKey]) {
              return true;
            }
          }
          return false;
        }
        createSuperScope(ctx) {
          let data = {
            ...BuildInObjects
          };
          const buildInObjectKeys = Object.keys(data);
          buildInObjectKeys.forEach((key) => {
            if (key in ctx) {
              delete data[key];
            }
          });
          return new Scope(data, null, SuperScopeName);
        }
        setCurrentContext(ctx) {
          this.currentContext = ctx;
        }
        setCurrentScope(scope) {
          this.currentScope = scope;
        }
        evaluate(code = "") {
          let node;
          if (!code)
            return;
          node = typeof code === "string" ? this.parse(code, {
            ecmaVersion: this.options.ecmaVersion || Interpreter.ecmaVersion
          }) : code;
          return this.evaluateNode(node, code);
        }
        appendCode(code) {
          return this.evaluate(code);
        }
        evaluateNode(node, source = "") {
          this.value = void 0;
          this.source = typeof source === "string" ? source : this.options.source || "";
          this.isRunning = true;
          this.execStartTime = Date.now();
          this.execEndTime = this.execStartTime;
          this.step = 0;
          this.collectDeclVars = Object.create(null);
          this.collectDeclFuncs = Object.create(null);
          const currentScope = this.getCurrentScope();
          const currentContext = this.getCurrentContext();
          const labelStack = currentScope.labelStack.concat([]);
          const callStack = this.callStack.concat([]);
          const reset = () => {
            this.setCurrentScope(currentScope);
            this.setCurrentContext(currentContext);
            currentScope.labelStack = labelStack;
            this.callStack = callStack;
          };
          try {
            const bodyClosure = this.createClosure(node);
            this.addDeclarationsToScope(this.collectDeclVars, this.collectDeclFuncs, this.getCurrentScope());
            bodyClosure();
          } catch (e) {
            throw e;
          } finally {
            reset();
            this.execEndTime = Date.now();
          }
          this.isRunning = false;
          return this.getValue();
        }
        createErrorMessage(msg, value, node) {
          let message = msg[1].replace("%0", String(value));
          if (node !== null) {
            message += this.getNodePosition(node || this.lastExecNode);
          }
          return message;
        }
        createError(message, error) {
          return new error(message);
        }
        createThrowError(message, error) {
          return this.createError(message, error);
        }
        createInternalThrowError(msg, value, node) {
          return this.createError(this.createErrorMessage(msg, value, node), msg[2]);
        }
        checkStep() {
          const timeout = this.timeout;
          if (timeout && timeout > 0 && this.isTimeout()) {
            throw this.createInternalThrowError(Messages.ExecutionTimeOutError, timeout, null);
          }
          if (this.isMaxSteps()) {
            throw this.createInternalThrowError(Messages.MaxStepsError, this.maxSteps, null);
          }
        }
        isTimeout() {
          if (!this.isRunning)
            return false;
          const timeout = this.timeout || 0;
          const now = Date.now();
          if (now - this.execStartTime > timeout) {
            return true;
          }
          return false;
        }
        isMaxSteps() {
          if (!this.isRunning)
            return false;
          this.step++;
          return this.step > this.options.maxSteps;
        }
        getNodePosition(node) {
          if (node) {
            const errorCode = "";
            return node.loc ? ` [${node.loc.start.line}:${node.loc.start.column}]${errorCode}` : "";
          }
          return "";
        }
        createClosure(node) {
          let closure;
          switch (node.type) {
            case "ClassDeclaration":
              closure = this.classDeclarationHandler(node);
              break;
            case "ClassExpression":
              closure = this.classExpressionHandler(node);
              break;
            case "Super":
              closure = this.superHandler(node);
              break;
            case "BinaryExpression":
              closure = this.binaryExpressionHandler(node);
              break;
            case "LogicalExpression":
              closure = this.logicalExpressionHandler(node);
              break;
            case "UnaryExpression":
              closure = this.unaryExpressionHandler(node);
              break;
            case "UpdateExpression":
              closure = this.updateExpressionHandler(node);
              break;
            case "ObjectExpression":
              closure = this.objectExpressionHandler(node);
              break;
            case "ArrayExpression":
              closure = this.arrayExpressionHandler(node);
              break;
            case "CallExpression":
              closure = this.callExpressionHandler(node);
              break;
            case "NewExpression":
              closure = this.newExpressionHandler(node);
              break;
            case "MemberExpression":
              closure = this.memberExpressionHandler(node);
              break;
            case "ThisExpression":
              closure = this.thisExpressionHandler(node);
              break;
            case "SequenceExpression":
              closure = this.sequenceExpressionHandler(node);
              break;
            case "Literal":
              closure = this.literalHandler(node);
              break;
            case "TemplateLiteral":
              closure = this.templateLiteralHandler(node);
              break;
            case "Identifier":
              closure = this.identifierHandler(node);
              break;
            case "AssignmentExpression":
              closure = this.assignmentExpressionHandler(node);
              break;
            case "FunctionDeclaration":
              closure = this.functionDeclarationHandler(node);
              break;
            case "VariableDeclaration":
              closure = this.variableDeclarationHandler(node);
              break;
            case "BlockStatement":
            case "Program":
              closure = this.programHandler(node);
              break;
            case "ExpressionStatement":
              closure = this.expressionStatementHandler(node);
              break;
            case "EmptyStatement":
              closure = this.emptyStatementHandler(node);
              break;
            case "ReturnStatement":
              closure = this.returnStatementHandler(node);
              break;
            case "FunctionExpression":
              closure = this.functionExpressionHandler(node);
              break;
            case "ArrowFunctionExpression":
              closure = this.arrowFunctionExpressionHandler(node);
              break;
            case "IfStatement":
              closure = this.ifStatementHandler(node);
              break;
            case "ConditionalExpression":
              closure = this.conditionalExpressionHandler(node);
              break;
            case "ForStatement":
              closure = this.forStatementHandler(node);
              break;
            case "WhileStatement":
              closure = this.whileStatementHandler(node);
              break;
            case "DoWhileStatement":
              closure = this.doWhileStatementHandler(node);
              break;
            case "ForInStatement":
              closure = this.forInStatementHandler(node);
              break;
            case "WithStatement":
              closure = this.withStatementHandler(node);
              break;
            case "ThrowStatement":
              closure = this.throwStatementHandler(node);
              break;
            case "TryStatement":
              closure = this.tryStatementHandler(node);
              break;
            case "ContinueStatement":
              closure = this.continueStatementHandler(node);
              break;
            case "BreakStatement":
              closure = this.breakStatementHandler(node);
              break;
            case "SwitchStatement":
              closure = this.switchStatementHandler(node);
              break;
            case "LabeledStatement":
              closure = this.labeledStatementHandler(node);
              break;
            case "DebuggerStatement":
              closure = this.debuggerStatementHandler(node);
              break;
            case "GroupStatement":
              closure = this.groupStatementHandler(node);
              break;
            case "SpreadElement":
              closure = this.spreadElementHandler(node);
              break;
            default:
              throw this.createInternalThrowError(Messages.NodeTypeSyntaxError, node.type, node);
          }
          return (...args) => {
            this.lastExecNode = node;
            this.checkStep();
            return closure(...args);
          };
        }
        binaryExpressionHandler(node) {
          const leftExpression = this.createClosure(node.left);
          const rightExpression = this.createClosure(node.right);
          return () => {
            const leftValue = leftExpression();
            const rightValue = rightExpression();
            switch (node.operator) {
              case "==":
                return leftValue == rightValue;
              case "!=":
                return leftValue != rightValue;
              case "===":
                return leftValue === rightValue;
              case "!==":
                return leftValue !== rightValue;
              case "<":
                return leftValue < rightValue;
              case "<=":
                return leftValue <= rightValue;
              case ">":
                return leftValue > rightValue;
              case ">=":
                return leftValue >= rightValue;
              case "<<":
                return leftValue << rightValue;
              case ">>":
                return leftValue >> rightValue;
              case ">>>":
                return leftValue >>> rightValue;
              case "+":
                return leftValue + rightValue;
              case "-":
                return leftValue - rightValue;
              case "*":
                return leftValue * rightValue;
              case "**":
                return Math.pow(leftValue, rightValue);
              case "/":
                return leftValue / rightValue;
              case "%":
                return leftValue % rightValue;
              case "|":
                return leftValue | rightValue;
              case "^":
                return leftValue ^ rightValue;
              case "&":
                return leftValue & rightValue;
              case "in":
                return leftValue in rightValue;
              case "instanceof":
                return leftValue instanceof rightValue;
              case "|>":
                if (typeof rightValue !== "function") {
                  throw new TypeError("Right side of pipeline must be a function");
                }
                return rightValue(leftValue);
              default:
                throw this.createInternalThrowError(Messages.BinaryOperatorSyntaxError, node.operator, node);
            }
          };
        }
        logicalExpressionHandler(node) {
          const leftExpression = this.createClosure(node.left);
          const rightExpression = this.createClosure(node.right);
          return () => {
            switch (node.operator) {
              case "||":
                return leftExpression() || rightExpression();
              case "&&":
                return leftExpression() && rightExpression();
              default:
                throw this.createInternalThrowError(Messages.LogicalOperatorSyntaxError, node.operator, node);
            }
          };
        }
        unaryExpressionHandler(node) {
          switch (node.operator) {
            case "delete": {
              const objectGetter = this.createObjectGetter(node.argument);
              const nameGetter = this.createNameGetter(node.argument);
              return () => {
                let obj = objectGetter();
                const name = nameGetter();
                return delete obj[name];
              };
            }
            default: {
              let expression;
              if (node.operator === "typeof" && node.argument.type === "Identifier") {
                const objectGetter = this.createObjectGetter(node.argument);
                const nameGetter = this.createNameGetter(node.argument);
                expression = () => objectGetter()[nameGetter()];
              } else {
                expression = this.createClosure(node.argument);
              }
              return () => {
                const value = expression();
                switch (node.operator) {
                  case "-":
                    return -value;
                  case "+":
                    return +value;
                  case "!":
                    return !value;
                  case "~":
                    return ~value;
                  case "void":
                    return void 0;
                  case "typeof":
                    return typeof value;
                  default:
                    throw this.createInternalThrowError(Messages.UnaryOperatorSyntaxError, node.operator, node);
                }
              };
            }
          }
        }
        updateExpressionHandler(node) {
          const objectGetter = this.createObjectGetter(node.argument);
          const nameGetter = this.createNameGetter(node.argument);
          return () => {
            const obj = objectGetter();
            const name = nameGetter();
            this.assertVariable(obj, name, node);
            switch (node.operator) {
              case "++":
                return node.prefix ? ++obj[name] : obj[name]++;
              case "--":
                return node.prefix ? --obj[name] : obj[name]--;
              default:
                throw this.createInternalThrowError(Messages.UpdateOperatorSyntaxError, node.operator, node);
            }
          };
        }
        objectExpressionHandler(node) {
          const items = [];
          function getKey(keyNode) {
            if (keyNode.type === "Identifier") {
              return keyNode.name;
            } else if (keyNode.type === "Literal") {
              return keyNode.value;
            } else {
              return this.throwError(Messages.ObjectStructureSyntaxError, keyNode.type, keyNode);
            }
          }
          const properties = Object.create(null);
          const computedProperties = [];
          node.properties.forEach((property) => {
            if (property.type == "Property") {
              const kind = property.kind;
              if (!property.computed) {
                const key = getKey(property.key);
                if (!properties[key] || kind === "init") {
                  properties[key] = {};
                }
                properties[key][kind] = this.createClosure(property.value);
                items.push({
                  key,
                  property
                });
              } else {
                const keyClosure = this.createClosure(property.key);
                computedProperties.push({
                  keyClosure,
                  kind,
                  valueClosure: this.createClosure(property.value)
                });
              }
            } else if (property.type == "SpreadElement") {
              items.push({
                spread: this.createClosure(property.argument)
              });
            }
          });
          return () => {
            const result = {};
            const len = items.length;
            const MArray = this.globalScope.data["Array"];
            for (let i = 0; i < len; i++) {
              const item = items[i];
              if (item.key != null) {
                const key = item.key;
                const kinds = properties[key];
                const value = kinds.init ? kinds.init() : void 0;
                const getter = kinds.get ? kinds.get() : function() {
                };
                const setter = kinds.set ? kinds.set() : function(a) {
                };
                if ("set" in kinds || "get" in kinds) {
                  const descriptor = {
                    configurable: true,
                    enumerable: true,
                    get: getter,
                    set: setter
                  };
                  Object.defineProperty(result, key, descriptor);
                } else {
                  const property = item.property;
                  const kind = property.kind;
                  if (property.key.type === "Identifier" && property.value.type === "FunctionExpression" && kind === "init" && !property.value.id) {
                    defineFunctionName(value, property.key.name);
                  }
                  result[key] = value;
                }
              } else {
                let targetObj = item.spread && item.spread();
                if (targetObj && Array.isArray(targetObj)) {
                  for (let i2 = 0; i2 < targetObj.length; i2++) {
                    result[String(i2)] = targetObj[i2];
                  }
                } else if (targetObj && typeof targetObj === "object") {
                  let keys = Object.getOwnPropertyNames(targetObj);
                  keys.forEach((key) => {
                    result[key] = targetObj[key];
                  });
                } else {
                  continue;
                }
              }
            }
            let prop = {};
            computedProperties.forEach((pr) => {
              let key = pr.keyClosure();
              let isSb = isSymbol(key);
              let name = isSb ? storeKey(key) : key;
              if (!prop[name]) {
                prop[name] = {};
              }
              prop[name][pr.kind] = pr.valueClosure();
              prop[name]["symbol"] = isSb;
            });
            Object.getOwnPropertyNames(prop).forEach((name) => {
              let item = prop[name];
              if ("set" in item || "get" in item) {
                const descriptor = {
                  configurable: true,
                  enumerable: item.symbol ? false : true,
                  get: item.get || function() {
                  },
                  set: item.set || function(a) {
                  }
                };
                Object.defineProperty(result, name, descriptor);
              } else {
                if (item.symbol) {
                  Object.defineProperty(result, name, {
                    value: item.init,
                    writable: true,
                    enumerable: false,
                    configurable: true
                  });
                } else {
                  result[name] = item.init;
                }
              }
            });
            return result;
          };
        }
        arrayExpressionHandler(node) {
          const items = node.elements.map((element) => {
            if (!element)
              return null;
            return {
              type: element.type,
              closure: element.type == "SpreadElement" ? this.createClosure(element.argument) : this.createClosure(element)
            };
          });
          return () => {
            const len = items.length;
            let result = [];
            for (let i = 0; i < len; i++) {
              const item = items[i];
              if (!item) {
                result.push(void 0);
              } else {
                if (item.type == "SpreadElement") {
                  let arr = item.closure();
                  if (!Array.isArray(arr)) {
                    throw this.createInternalThrowError(Messages.NormalError, "cannot spread, not an array type", node);
                  }
                  result = result.concat(arr);
                } else {
                  result.push(item.closure());
                }
              }
            }
            return result;
          };
        }
        safeObjectGet(obj, key, node) {
          return obj[key];
        }
        createCallFunctionGetter(node) {
          switch (node.type) {
            case "MemberExpression": {
              const objectGetter = this.createClosure(node.object);
              const keyGetter = this.createMemberKeyGetter(node);
              const source = this.source;
              return () => {
                const obj = objectGetter();
                const key = keyGetter();
                const func = this.safeObjectGet(obj, key, node);
                if (!func || !isFunction(func)) {
                  const name = source.slice(node.start, node.end);
                  throw this.createInternalThrowError(Messages.FunctionUndefinedReferenceError, name, node);
                }
                if (func.__IS_EVAL_FUNC) {
                  return (code) => {
                    return func(new InternalInterpreterReflection(this), code, true);
                  };
                }
                if (func.__IS_FUNCTION_FUNC) {
                  return (...args) => {
                    return func(new InternalInterpreterReflection(this), ...args);
                  };
                }
                return func.bind(obj);
              };
            }
            default: {
              const closure = this.createClosure(node);
              return () => {
                let name = "";
                if (node.type === "Identifier") {
                  name = node.name;
                }
                const func = closure();
                if (!func || !isFunction(func)) {
                  throw this.createInternalThrowError(Messages.FunctionUndefinedReferenceError, name, node);
                }
                if (node.type === "Identifier" && func.__IS_EVAL_FUNC && name === "eval") {
                  return (code) => {
                    const scope = this.getScopeFromName(name, this.getCurrentScope());
                    const useGlobalScope = scope.name === SuperScopeName || scope.name === GlobalScopeName || scope.name === RootScopeName;
                    return func(new InternalInterpreterReflection(this), code, !useGlobalScope);
                  };
                }
                if (func.__IS_EVAL_FUNC) {
                  return (code) => {
                    return func(new InternalInterpreterReflection(this), code, true);
                  };
                }
                if (func.__IS_FUNCTION_FUNC) {
                  return (...args) => {
                    return func(new InternalInterpreterReflection(this), ...args);
                  };
                }
                let ctx = this.options.globalContextInFunction;
                if (node.type === "Identifier") {
                  const scope = this.getIdentifierScope(node);
                  if (scope.name === WithScopeName) {
                    ctx = scope.data;
                  }
                }
                return func.bind(ctx);
              };
            }
          }
        }
        callExpressionHandler(node) {
          const funcGetter = this.createCallFunctionGetter(node.callee);
          const argsGetter = node.arguments.map((arg) => ({
            type: arg.type,
            closure: this.createClosure(arg)
          }));
          return () => {
            let args = [];
            for (let i = 0; i < argsGetter.length; i++) {
              let arg = argsGetter[i];
              if (arg.type === "SpreadElement") {
                args = args.concat(arg.closure());
              } else {
                args.push(arg.closure());
              }
            }
            return funcGetter()(...args);
          };
        }
        functionExpressionHandler(node) {
          const self2 = this;
          const source = this.source;
          const oldDeclVars = this.collectDeclVars;
          const oldDeclFuncs = this.collectDeclFuncs;
          const oldDeclLex = this.collectDeclLex;
          this.collectDeclVars = Object.create(null);
          this.collectDeclFuncs = Object.create(null);
          this.collectDeclLex = [];
          const name = node.id ? node.id.name : "";
          const paramLength = node.params.filter((_) => _.type != "RestElement").length;
          const paramsGetter = node.params.map((param) => ({
            type: param.type,
            closure: this.createParamNameGetter(param)
          }));
          this.blockDeclareStart();
          const bodyClosure = this.createClosure(node.body);
          let lexDecls = this.blockDeclareEnd();
          const declVars = this.collectDeclVars;
          const declFuncs = this.collectDeclFuncs;
          const declLex = this.collectDeclLex;
          this.collectDeclVars = oldDeclVars;
          this.collectDeclFuncs = oldDeclFuncs;
          this.collectDeclLex = oldDeclLex;
          return (scope) => {
            const runtimeScope = scope || self2.getCurrentScope();
            const func = function(...args) {
              self2.callStack.push(`${name}`);
              const prevScope = self2.getCurrentScope();
              const prev_functionVarScope = self2._functionVarScope;
              const currentScope = createScope(runtimeScope, `FunctionScope(${name})`);
              currentScope.lexDeclared = lexDecls;
              self2.setCurrentScope(currentScope);
              self2.addDeclarationsToScope(declVars, declFuncs, currentScope);
              self2._functionVarScope = currentScope;
              if (name) {
                currentScope.data[name] = func;
              }
              currentScope.data["arguments"] = arguments;
              paramsGetter.forEach((getter, i) => {
                if (getter.type === "RestElement") {
                  currentScope.data[getter.closure()] = args.slice(i);
                } else {
                  currentScope.data[getter.closure()] = args[i];
                }
              });
              const prevContext = self2.getCurrentContext();
              self2.setCurrentContext(this);
              const result = bodyClosure();
              self2.setCurrentContext(prevContext);
              self2.setCurrentScope(prevScope);
              self2._functionVarScope = prev_functionVarScope;
              self2.callStack.pop();
              if (result instanceof Return) {
                return result.value;
              }
            };
            defineFunctionName(func, name);
            Object.defineProperty(func, "length", {
              value: paramLength,
              writable: false,
              enumerable: false,
              configurable: true
            });
            Object.defineProperty(func, "toString", {
              value: () => {
                return source.slice(node.start, node.end);
              },
              writable: true,
              configurable: true,
              enumerable: false
            });
            Object.defineProperty(func, "valueOf", {
              value: () => {
                return source.slice(node.start, node.end);
              },
              writable: true,
              configurable: true,
              enumerable: false
            });
            return func;
          };
        }
        blockDeclareStart() {
          this.collectDeclLex.push(Object.create(null));
        }
        blockDeclareEnd() {
          let lexDeclInThisBlock = this.collectDeclLex.pop();
          let lexDeclared;
          let lexNames = Object.getOwnPropertyNames(lexDeclInThisBlock);
          if (lexNames.length) {
            lexDeclared = Object.create(null);
            lexNames.forEach((key) => {
              if (lexDeclared != null)
                lexDeclared[key] = {
                  init: false,
                  kind: lexDeclInThisBlock ? lexDeclInThisBlock[key].kind : void 0
                };
            });
          } else {
            lexDeclared = null;
          }
          return lexDeclared;
        }
        arrowFunctionExpressionHandler(node) {
          const source = this.source;
          const oldDeclVars = this.collectDeclVars;
          const oldDeclFuncs = this.collectDeclFuncs;
          const oldDeclLex = this.collectDeclLex;
          this.collectDeclVars = Object.create(null);
          this.collectDeclFuncs = Object.create(null);
          this.collectDeclLex = [];
          const name = "anonymous_arrow_func";
          const paramLength = node.params.length;
          const paramsGetter = node.params.map((param) => ({
            type: param.type,
            closure: this.createParamNameGetter(param)
          }));
          this.blockDeclareStart();
          const bodyClosure = this.createClosure(node.expression === true ? {
            type: "GroupStatement",
            body: [{
              type: "ReturnStatement",
              argument: node.body
            }]
          } : node.body);
          let lexDecls = this.blockDeclareEnd();
          const declVars = this.collectDeclVars;
          const declFuncs = this.collectDeclFuncs;
          const declLex = this.collectDeclLex;
          this.collectDeclVars = oldDeclVars;
          this.collectDeclFuncs = oldDeclFuncs;
          this.collectDeclLex = oldDeclLex;
          return () => {
            const runtimeScope = this.getCurrentScope();
            const ctx = this.getCurrentContext();
            const func = (...args) => {
              this.callStack.push(`${name}`);
              const prevScope = this.getCurrentScope();
              const currentScope = createScope(runtimeScope, `FunctionScope(${name})`);
              currentScope.lexDeclared = lexDecls != null;
              this.setCurrentScope(currentScope);
              this.addDeclarationsToScope(declVars, declFuncs, currentScope);
              paramsGetter.forEach((getter, i) => {
                if (getter.type === "RestElement") {
                  currentScope.data[getter.closure()] = args.slice(i);
                } else {
                  currentScope.data[getter.closure()] = args[i];
                }
              });
              const prevContext = this.getCurrentContext();
              this.setCurrentContext(ctx);
              const result = bodyClosure();
              this.setCurrentContext(prevContext);
              this.setCurrentScope(prevScope);
              this.callStack.pop();
              if (result instanceof Return) {
                return result.value;
              }
            };
            defineFunctionName(func, name);
            Object.defineProperty(func, "toString", {
              value: () => {
                return source.slice(node.start, node.end);
              },
              writable: true,
              configurable: true,
              enumerable: false
            });
            Object.defineProperty(func, "valueOf", {
              value: () => {
                return source.slice(node.start, node.end);
              },
              writable: true,
              configurable: true,
              enumerable: false
            });
            return func;
          };
        }
        newExpressionHandler(node) {
          const source = this.source;
          const expression = this.createClosure(node.callee);
          const args = node.arguments.map((arg) => this.createClosure(arg));
          return () => {
            const construct = expression();
            if (!isFunction(construct) || construct.__IS_EVAL_FUNC) {
              const callee = node.callee;
              const name = source.slice(callee.start, callee.end);
              throw this.createInternalThrowError(Messages.IsNotConstructor, name, node);
            }
            if (construct.__IS_FUNCTION_FUNC) {
              return construct(new InternalInterpreterReflection(this), ...args.map((arg) => arg()));
            }
            return new construct(...args.map((arg) => arg()));
          };
        }
        memberExpressionHandler(node) {
          const objectGetter = this.createClosure(node.object);
          const keyGetter = this.createMemberKeyGetter(node);
          return () => {
            const obj = objectGetter();
            let key = keyGetter();
            if (key === "__proto__") {
              throw this.createInternalThrowError(Messages.BuiltInPrototypeChangeError, obj.constructor.name, node);
            }
            if (key === "prototype") {
              if (this.isBuiltInObject(obj)) {
                throw this.createInternalThrowError(Messages.BuiltInPrototypeChangeError, obj.constructor.name, node);
              }
            }
            if (key === "constructor" && obj[key] === Function) {
              return (...args) => {
                return internalFunction(new InternalInterpreterReflection(this), ...args);
              };
            }
            return obj[key];
          };
        }
        thisExpressionHandler(node) {
          return () => this.getCurrentContext();
        }
        sequenceExpressionHandler(node) {
          const expressions = node.expressions.map((item) => this.createClosure(item));
          return () => {
            let result;
            const len = expressions.length;
            for (let i = 0; i < len; i++) {
              const expression = expressions[i];
              result = expression();
            }
            return result;
          };
        }
        literalHandler(node) {
          return () => {
            if (node.regex) {
              return new RegExp(node.regex.pattern, node.regex.flags);
            }
            return node.value;
          };
        }
        identifierHandler(node) {
          return () => {
            const currentScope = this.getCurrentScope();
            const data = this.getScopeDataFromName(node.name, currentScope);
            this.assertVariable(data, node.name, node);
            return data[node.name];
          };
        }
        getIdentifierScope(node) {
          const currentScope = this.getCurrentScope();
          const scope = this.getScopeFromName(node.name, currentScope);
          return scope;
        }
        assignmentExpressionHandler(node) {
          if (node.left.type === "Identifier" && node.right.type === "FunctionExpression" && !node.right.id) {
            node.right.id = {
              type: "Identifier",
              name: node.left.name
            };
          }
          const dataGetter = this.createLeftObjectGetter(node.left);
          const nameGetter = this.createNameGetter(node.left);
          const rightValueGetter = this.createClosure(node.right);
          return () => {
            const data = dataGetter();
            const name = nameGetter();
            let realName;
            if (isSymbol(name)) {
              realName = storeKey(name);
            } else {
              realName = name;
            }
            if (realName === "__proto__") {
              return;
            }
            const rightValue = rightValueGetter();
            if (node.operator !== "=") {
              this.assertVariable(data, name, node);
            }
            switch (node.operator) {
              case "=":
                if (isSymbol(name)) {
                  Object.defineProperty(data, realName, {
                    value: rightValue,
                    writable: true,
                    enumerable: false,
                    configurable: true
                  });
                  return rightValue;
                } else {
                  return data[realName] = rightValue;
                }
              case "+=":
                return data[realName] += rightValue;
              case "-=":
                return data[realName] -= rightValue;
              case "*=":
                return data[realName] *= rightValue;
              case "**=":
                return data[name] = Math.pow(data[name], rightValue);
              case "/=":
                return data[realName] /= rightValue;
              case "%=":
                return data[realName] %= rightValue;
              case "<<=":
                return data[realName] <<= rightValue;
              case ">>=":
                return data[realName] >>= rightValue;
              case ">>>=":
                return data[realName] >>>= rightValue;
              case "&=":
                return data[realName] &= rightValue;
              case "^=":
                return data[realName] ^= rightValue;
              case "|=":
                return data[realName] |= rightValue;
              default:
                throw this.createInternalThrowError(Messages.AssignmentExpressionSyntaxError, node.type, node);
            }
          };
        }
        functionDeclarationHandler(node) {
          if (node.id) {
            const functionClosure = this.functionExpressionHandler(node);
            Object.defineProperty(functionClosure, "isFunctionDeclareClosure", {
              value: true,
              writable: false,
              configurable: false,
              enumerable: false
            });
            this.funcDeclaration(node.id.name, functionClosure);
          }
          return () => {
            return EmptyStatementReturn;
          };
        }
        getVariableName(node) {
          if (node.type === "Identifier") {
            return node.name;
          } else {
            throw this.createInternalThrowError(Messages.VariableTypeSyntaxError, node.type, node);
          }
        }
        detectVaiable(node, varName, blockVariables) {
          if (node.kind == "var") {
            if (this.collectDeclLex.some((_) => _[varName])) {
              throw this.createInternalThrowError(Messages.RedeclareBlockScopeVariableError, node.type, node);
            }
            this.varDeclaration(varName);
          } else {
            let stackTop = this.collectDeclLex[this.collectDeclLex.length - 1];
            stackTop && (stackTop[varName] = {
              init: false,
              kind: node.kind
            });
            blockVariables.push(varName);
          }
        }
        variableDeclarationHandler(node) {
          let assignmentsClosure;
          const assignments = [];
          let blockVariables = [];
          for (let i = 0; i < node.declarations.length; i++) {
            const decl = node.declarations[i];
            if (decl.id.type == "ObjectPattern") {
              if (!decl.init) {
                throw this.createInternalThrowError(Messages.SpreadPatternVariableNoInit, "", node);
              }
              let properties = decl.id.properties;
              let alreadyVars = [];
              properties.forEach((item) => {
                if (item.type === "Property") {
                  let varName = this.getVariableName(item.value);
                  alreadyVars.push(varName);
                  this.detectVaiable(node, varName, blockVariables);
                  assignments.push({
                    type: "ObjectPatternAssignExpression",
                    left: item.value,
                    right: decl.init
                  });
                } else if (item.type === "RestElement") {
                  let varName = item.argument.name;
                  this.detectVaiable(node, varName, blockVariables);
                  assignments.push({
                    type: "ObjectPatternAssignExpression",
                    left: item.argument,
                    right: decl.init,
                    rest: alreadyVars
                  });
                } else {
                  throw this.createInternalThrowError(Messages.UnknownVariableDeclTypeError, "", node);
                }
              });
            } else if (decl.id.type == "ArrayPattern") {
              if (!decl.init) {
                throw this.createInternalThrowError(Messages.SpreadPatternVariableNoInit, "", node);
              }
              let elements = decl.id.elements;
              let alreadyVars = [];
              elements.forEach((item, arr_ind) => {
                if (item.type === "Identifier") {
                  let varName = item.name;
                  alreadyVars.push(varName);
                  this.detectVaiable(node, varName, blockVariables);
                  assignments.push({
                    type: "ObjectPatternAssignExpression",
                    left: item,
                    right: decl.init,
                    index: arr_ind
                  });
                } else if (item.type === "RestElement") {
                  let varName = item.argument.name;
                  this.detectVaiable(node, varName, blockVariables);
                  assignments.push({
                    type: "ObjectPatternAssignExpression",
                    left: item.argument,
                    right: decl.init,
                    index: arr_ind,
                    arrRest: true
                  });
                } else {
                  throw this.createInternalThrowError(Messages.UnknownVariableDeclTypeError, "", node);
                }
              });
            } else {
              let variableName = this.getVariableName(decl.id);
              this.detectVaiable(node, variableName, blockVariables);
              if (decl.init) {
                assignments.push({
                  type: "AssignmentExpression",
                  operator: "=",
                  left: decl.id,
                  right: decl.init
                });
              }
            }
          }
          if (assignments.length) {
            assignmentsClosure = this.createClosure({
              type: "GroupStatement",
              body: assignments
            });
          }
          return () => {
            if (assignmentsClosure) {
              if (blockVariables.length) {
                let scope = this.getCurrentScope();
                blockVariables.forEach((name) => {
                  if (scope.lexDeclared[name].kind === "const") {
                  } else if (scope.lexDeclared[name].kind === "let") {
                    scope.lexDeclared[name].init = true;
                  }
                });
              }
              const oldValue = this.isVarDeclMode;
              this.isVarDeclMode = true;
              assignmentsClosure();
              this.isVarDeclMode = oldValue;
            }
            return EmptyStatementReturn;
          };
        }
        assertVariable(data, name, node) {
          if (data === this.globalScope.data && !(name in data)) {
            throw this.createInternalThrowError(Messages.VariableUndefinedReferenceError, name, node);
          }
        }
        programHandler(node) {
          this.blockDeclareStart();
          let stmtClosures = node.body.map((stmt) => {
            return this.createClosure(stmt);
          });
          const functionDecl = node.body.map((_, index) => ({ type: _.type, index })).filter((_) => _.type == "FunctionDeclaration");
          const lexDeclared = this.blockDeclareEnd();
          return () => {
            let result = EmptyStatementReturn;
            let prevScope;
            let newScope;
            if (lexDeclared) {
              newScope = createScope(this.getCurrentScope(), `BScope`, "block");
              newScope.lexDeclared = lexDeclared;
              prevScope = this.entryBlockScope(newScope);
            }
            functionDecl.forEach((_) => {
              stmtClosures[_.index]();
              stmtClosures[_.index] = null;
            });
            stmtClosures = stmtClosures.filter((_) => _);
            for (let i = 0; i < stmtClosures.length; i++) {
              const stmtClosure = stmtClosures[i];
              const ret = this.setValue(stmtClosure());
              if (ret === EmptyStatementReturn)
                continue;
              result = ret;
              if (result instanceof Return || result instanceof BreakLabel || result instanceof ContinueLabel || result === Break || result === Continue) {
                break;
              }
            }
            if (lexDeclared) {
              this.setCurrentScope(prevScope);
            }
            return result;
          };
        }
        expressionStatementHandler(node) {
          return this.createClosure(node.expression);
        }
        emptyStatementHandler(node) {
          return () => EmptyStatementReturn;
        }
        returnStatementHandler(node) {
          const argumentClosure = node.argument ? this.createClosure(node.argument) : noop;
          return () => new Return(argumentClosure());
        }
        ifStatementHandler(node) {
          const testClosure = this.createClosure(node.test);
          const consequentClosure = this.createClosure(node.consequent);
          const alternateClosure = node.alternate ? this.createClosure(node.alternate) : () => EmptyStatementReturn;
          return () => {
            return testClosure() ? consequentClosure() : alternateClosure();
          };
        }
        conditionalExpressionHandler(node) {
          return this.ifStatementHandler(node);
        }
        forStatementHandler(node) {
          let initClosure = noop;
          let testClosure = node.test ? this.createClosure(node.test) : () => true;
          let updateClosure = noop;
          let initLexDeclared;
          let getBodyClosure = () => {
            if (node.body.type == "BlockStatement") {
              return {
                needBlock: null,
                closure: this.createClosure(node.body)
              };
            } else {
              this.blockDeclareStart();
              let closure = this.createClosure(node.body);
              let bodyLex = this.blockDeclareEnd();
              return {
                needBlock: bodyLex,
                closure
              };
            }
          };
          if (node.type === "ForStatement") {
            if (node.init) {
              this.blockDeclareStart();
              initClosure = this.createClosure(node.init);
              initLexDeclared = this.blockDeclareEnd();
            }
            updateClosure = node.update ? this.createClosure(node.update) : noop;
          } else {
          }
          return (pNode) => {
            let labelName;
            let result = EmptyStatementReturn;
            let shouldInitExec = node.type === "DoWhileStatement";
            if (pNode && pNode.type === "LabeledStatement") {
              labelName = pNode.label.name;
            }
            let prevScope;
            let newScope;
            if (initLexDeclared) {
              newScope = createScope(this.getCurrentScope(), `BScope(for-let)`, "block");
              newScope.lexDeclared = initLexDeclared;
              prevScope = this.entryBlockScope(newScope);
            }
            for (initClosure(); shouldInitExec || testClosure(); updateClosure()) {
              shouldInitExec = false;
              let bodyClosure = getBodyClosure();
              let bodyPrev;
              let bodyScope;
              if (bodyClosure.needBlock) {
                bodyScope = createScope(this.getCurrentScope(), `BScope(for-body)`, "block");
                bodyScope.lexDeclared = bodyClosure.needBlock;
                bodyPrev = this.entryBlockScope(bodyScope);
              }
              const ret = this.setValue(bodyClosure.closure());
              if (bodyClosure.needBlock) {
                this.setCurrentScope(bodyPrev);
              }
              if (ret === EmptyStatementReturn || ret === Continue)
                continue;
              if (ret === Break) {
                break;
              }
              result = ret;
              if (result instanceof ContinueLabel && result.value === labelName) {
                result = EmptyStatementReturn;
                continue;
              }
              if (result instanceof Return || result instanceof BreakLabel || result instanceof ContinueLabel) {
                break;
              }
            }
            if (initLexDeclared) {
              this.setCurrentScope(prevScope);
            }
            return result;
          };
        }
        whileStatementHandler(node) {
          return this.forStatementHandler(node);
        }
        doWhileStatementHandler(node) {
          return this.forStatementHandler(node);
        }
        forInStatementHandler(node) {
          let left = node.left;
          const rightClosure = this.createClosure(node.right);
          const bodyClosure = this.createClosure(node.body);
          if (node.left.type === "VariableDeclaration") {
            this.createClosure(node.left)();
            left = node.left.declarations[0].id;
          }
          return (pNode) => {
            let labelName;
            let result = EmptyStatementReturn;
            let x;
            if (pNode && pNode.type === "LabeledStatement") {
              labelName = pNode.label.name;
            }
            const data = rightClosure();
            for (x in data) {
              this.assignmentExpressionHandler({
                type: "AssignmentExpression",
                operator: "=",
                left,
                right: {
                  type: "Literal",
                  value: x
                }
              })();
              const ret = this.setValue(bodyClosure());
              if (ret === EmptyStatementReturn || ret === Continue)
                continue;
              if (ret === Break) {
                break;
              }
              result = ret;
              if (result instanceof ContinueLabel && result.value === labelName) {
                result = EmptyStatementReturn;
                continue;
              }
              if (result instanceof Return || result instanceof BreakLabel || result instanceof ContinueLabel) {
                break;
              }
            }
            return result;
          };
        }
        withStatementHandler(node) {
          const objectClosure = this.createClosure(node.object);
          const bodyClosure = this.createClosure(node.body);
          return () => {
            const data = objectClosure();
            const currentScope = this.getCurrentScope();
            const newScope = new Scope(data, currentScope, WithScopeName);
            this.setCurrentScope(newScope);
            const result = this.setValue(bodyClosure());
            this.setCurrentScope(currentScope);
            return result;
          };
        }
        throwStatementHandler(node) {
          const argumentClosure = this.createClosure(node.argument);
          return () => {
            this.setValue(void 0);
            throw argumentClosure();
          };
        }
        tryStatementHandler(node) {
          const blockClosure = this.createClosure(node.block);
          const handlerClosure = node.handler ? this.catchClauseHandler(node.handler) : null;
          const finalizerClosure = node.finalizer ? this.createClosure(node.finalizer) : null;
          return () => {
            const currentScope = this.getCurrentScope();
            const currentContext = this.getCurrentContext();
            const labelStack = currentScope.labelStack.concat([]);
            const callStack = this.callStack.concat([]);
            let result = EmptyStatementReturn;
            let finalReturn;
            let throwError;
            const reset = () => {
              this.setCurrentScope(currentScope);
              this.setCurrentContext(currentContext);
              currentScope.labelStack = labelStack;
              this.callStack = callStack;
            };
            try {
              result = this.setValue(blockClosure());
              if (result instanceof Return) {
                finalReturn = result;
              }
            } catch (err) {
              reset();
              if (this.isInterruptThrow(err)) {
                throw err;
              }
              if (handlerClosure) {
                try {
                  result = this.setValue(handlerClosure(err));
                  if (result instanceof Return) {
                    finalReturn = result;
                  }
                } catch (err2) {
                  reset();
                  if (this.isInterruptThrow(err2)) {
                    throw err2;
                  }
                  throwError = err2;
                }
              }
            }
            if (finalizerClosure) {
              try {
                result = finalizerClosure();
                if (result instanceof Return) {
                  finalReturn = result;
                }
              } catch (err) {
                reset();
                if (this.isInterruptThrow(err)) {
                  throw err;
                }
                throwError = err;
              }
            }
            if (throwError)
              throw throwError;
            if (finalReturn) {
              return finalReturn;
            }
            return result;
          };
        }
        catchClauseHandler(node) {
          const paramNameGetter = this.createParamNameGetter(node.param);
          const bodyClosure = this.createClosure(node.body);
          return (e) => {
            let result;
            const currentScope = this.getCurrentScope();
            const scopeData = currentScope.data;
            const paramName = paramNameGetter();
            const isInScope = hasOwnProperty.call(scopeData, paramName);
            const oldValue = scopeData[paramName];
            scopeData[paramName] = e;
            result = bodyClosure();
            if (isInScope) {
              scopeData[paramName] = oldValue;
            } else {
              delete scopeData[paramName];
            }
            return result;
          };
        }
        continueStatementHandler(node) {
          return () => node.label ? new ContinueLabel(node.label.name) : Continue;
        }
        breakStatementHandler(node) {
          return () => node.label ? new BreakLabel(node.label.name) : Break;
        }
        switchStatementHandler(node) {
          const discriminantClosure = this.createClosure(node.discriminant);
          const caseClosures = node.cases.map((item) => this.switchCaseHandler(item));
          return () => {
            const value = discriminantClosure();
            let match = false;
            let result;
            let ret, defaultCase;
            for (let i = 0; i < caseClosures.length; i++) {
              const item = caseClosures[i]();
              const test = item.testClosure();
              if (test === DefaultCase) {
                defaultCase = item;
                continue;
              }
              if (match || test === value) {
                match = true;
                ret = this.setValue(item.bodyClosure());
                if (ret === EmptyStatementReturn)
                  continue;
                if (ret === Break) {
                  break;
                }
                result = ret;
                if (result instanceof Return || result instanceof BreakLabel || result instanceof ContinueLabel || result === Continue) {
                  break;
                }
              }
            }
            if (!match && defaultCase) {
              ret = this.setValue(defaultCase.bodyClosure());
              const isEBC = ret === EmptyStatementReturn || ret === Break || ret === Continue;
              if (!isEBC) {
                result = ret;
              }
            }
            return result;
          };
        }
        switchCaseHandler(node) {
          const testClosure = node.test ? this.createClosure(node.test) : () => DefaultCase;
          const bodyClosure = this.createClosure({
            type: "BlockStatement",
            body: node.consequent
          });
          return () => ({
            testClosure,
            bodyClosure
          });
        }
        labeledStatementHandler(node) {
          const labelName = node.label.name;
          const bodyClosure = this.createClosure(node.body);
          return () => {
            let result;
            const currentScope = this.getCurrentScope();
            currentScope.labelStack.push(labelName);
            result = bodyClosure(node);
            if (result instanceof BreakLabel && result.value === labelName) {
              result = EmptyStatementReturn;
            }
            currentScope.labelStack.pop();
            return result;
          };
        }
        debuggerStatementHandler(node) {
          return () => {
            debugger;
            return EmptyStatementReturn;
          };
        }
        groupStatementHandler(node) {
          const stmtClosures = node.body.map((stmt) => {
            return this.createClosure(stmt);
          });
          return () => {
            let result = EmptyStatementReturn;
            let prevScope;
            let newScope;
            for (let i = 0; i < stmtClosures.length; i++) {
              const stmtClosure = stmtClosures[i];
              const ret = this.setValue(stmtClosure());
              if (ret === EmptyStatementReturn)
                continue;
              result = ret;
              if (result instanceof Return || result instanceof BreakLabel || result instanceof ContinueLabel || result === Break || result === Continue) {
                break;
              }
            }
            return result;
          };
        }
        templateLiteralHandler(node) {
          let vasGetters = node.expressions.map((_) => this.createClosure(_));
          let strs = node.quasis.map((_) => ({
            value: _.value,
            tail: _.tail
          }));
          return () => {
            let str = "";
            for (let i = 0; i < strs.length; i++) {
              str += strs[i].value.cooked + (strs[i].tail ? "" : this.getString(vasGetters[i]()));
            }
            return str;
          };
        }
        spreadElementHandler(node) {
          let closure = this.createClosure(node.argument);
          return () => {
            const data = closure();
            const MArray = this.globalScope.data["Array"];
            if (!Array.isArray(data)) {
              throw this.createInternalThrowError(Messages.NormalError, `spread node type not array`, node);
            }
            return data;
          };
        }
        classDeclarationHandler(node) {
          let className;
          let classClosure;
          if (node.id) {
            classClosure = this.classExpressionHandler(node);
            let stackTop = this.collectDeclLex[this.collectDeclLex.length - 1];
            stackTop && (stackTop[node.id.name] = {
              init: false,
              kind: "let"
            });
            className = node.id.name;
          }
          return () => {
            const closure = classClosure();
            if (className) {
              let scope = this.getCurrentScope();
              scope.lexDeclared[className].init = true;
              scope.data[className] = closure;
            }
            return closure;
          };
        }
        classExpressionHandler(node) {
          const className = node.id ? node.id.name : "";
          let classDecl = {
            static: [],
            fieldsArrow: [],
            fieldsProperty: [],
            method: []
          };
          let superClass = node.superClass ? this.createClosure(node.superClass) : null;
          node.body.body.forEach((item) => {
            if (item.type === "MethodDefinition") {
              if (item.kind === "constructor") {
                classDecl.cons = this.createClosure(item.value);
              } else if (item.kind === "method") {
                classDecl[item.static ? "static" : "method"].push({
                  name: {
                    computed: item.computed,
                    value: item.computed ? this.createClosure(item.key) : item.key.name
                  },
                  value: this.createClosure(item.value)
                });
              } else if (item.kind === "get" || item.kind === "set") {
                throw this.createInternalThrowError(Messages.NormalError, "not support getter and setter in class", node);
              }
            } else if (item.type === "FieldDefinition" || item.type === "PropertyDefinition") {
              if (item.static) {
                classDecl.static.push({
                  name: {
                    computed: item.computed,
                    value: item.computed ? this.createClosure(item.key) : item.key.name
                  },
                  value: this.createClosure(item.value)
                });
              } else {
                let t = item.value.type == "ArrowFunctionExpression" ? "fieldsArrow" : "fieldsProperty";
                classDecl[t].push({
                  name: {
                    computed: item.computed,
                    value: item.computed ? this.createClosure(item.key) : item.key.name
                  },
                  value: this.createClosure(item.value)
                });
              }
            } else {
              throw this.createInternalThrowError(Messages.NormalError, "unknown class body type " + item.type, node.body);
            }
          });
          return () => {
            let self2 = this;
            let _super = superClass ? superClass() : null;
            let cons;
            if (_super && classDecl.cons) {
              let newScope = createScope(this.getCurrentScope(), `FScope(constructor)`, "block");
              newScope.lexDeclared = {
                super: {
                  kind: "const",
                  init: true
                }
              };
              newScope.data["super"] = _super;
              let prevScope = this.entryBlockScope(newScope);
              cons = classDecl.cons();
              this.setCurrentScope(prevScope);
            } else {
              cons = classDecl.cons ? classDecl.cons() : null;
            }
            let func = function() {
              let _this = this;
              if (superClass && !cons) {
                _this = _super.call(_this) || _this;
              }
              classDecl.fieldsArrow.forEach((item) => {
                let prev = self2.getCurrentContext();
                self2.setCurrentContext(_this);
                let fn = item.value();
                self2.setCurrentContext(prev);
                setKeyVal(_this, item, fn);
              });
              classDecl.fieldsProperty.forEach((item) => {
                setKeyVal(_this, item, item.value());
              });
              if (cons) {
                cons.apply(_this, arguments);
              }
              return _this;
            };
            superClass && __extend(func, _super);
            classDecl.method.forEach((item) => {
              func.prototype[item.name.computed ? item.name.value() : item.name.value] = item.value();
            });
            classDecl.static.forEach((item) => {
              func[item.name.computed ? item.name.value() : item.name.value] = item.value();
            });
            if (className) {
              Object.defineProperty(func, "name", {
                value: className,
                writable: false,
                enumerable: false,
                configurable: true
              });
            }
            return func;
          };
        }
        superHandler(node) {
          return () => {
            const currentScope = this.getCurrentScope();
            const data = this.getScopeDataFromName("super", currentScope);
            this.assertVariable(data, "super", node);
            return data["super"];
          };
        }
        createParamNameGetter(node) {
          if (node.type === "Identifier") {
            return () => node.name;
          } else if (node.type === "RestElement") {
            return this.createParamNameGetter(node.argument);
          } else {
            throw this.createInternalThrowError(Messages.ParamTypeSyntaxError, node.type, node);
          }
        }
        createObjectKeyGetter(node) {
          let getter;
          if (node.type === "Identifier") {
            getter = () => node.name;
          } else {
            getter = this.createClosure(node);
          }
          return function() {
            return getter();
          };
        }
        createMemberKeyGetter(node) {
          return node.computed ? this.createClosure(node.property) : this.createObjectKeyGetter(node.property);
        }
        createLeftObjectGetter(node) {
          switch (node.type) {
            case "Identifier":
              return () => {
                let name = node.name;
                let scope = this.getScopeFromName(name, this.getCurrentScope(), true);
                if (scope.lexDeclared && scope.lexDeclared[name] && scope.lexDeclared[name].kind == "const") {
                  if (scope.lexDeclared[name].init === false) {
                    scope.lexDeclared[name].init = true;
                  } else {
                    throw this.createInternalThrowError(Messages.ConstChangeError, name, node);
                  }
                }
                return scope.data;
              };
            case "MemberExpression":
              return this.createClosure(node.object);
            default:
              throw this.createInternalThrowError(Messages.AssignmentTypeSyntaxError, node.type, node);
          }
        }
        createObjectGetter(node) {
          switch (node.type) {
            case "Identifier":
              return () => this.getScopeDataFromName(node.name, this.getCurrentScope());
            case "MemberExpression":
              return this.createClosure(node.object);
            default:
              throw this.createInternalThrowError(Messages.AssignmentTypeSyntaxError, node.type, node);
          }
        }
        createNameGetter(node) {
          switch (node.type) {
            case "Identifier":
              return () => node.name;
            case "MemberExpression":
              return this.createMemberKeyGetter(node);
            default:
              throw this.createInternalThrowError(Messages.AssignmentTypeSyntaxError, node.type, node);
          }
        }
        getString(val) {
          if (typeof val === "string") {
            return val;
          } else if (typeof val.toString === "function") {
            return val.toString();
          } else {
            return Object.prototype.toString.call(val);
          }
        }
        varDeclaration(name) {
          const context = this.collectDeclVars;
          context[name] = void 0;
        }
        funcDeclaration(name, func) {
          const context = this.collectDeclFuncs;
          context[name] = func;
        }
        addDeclarationsToScope(declVars, declFuncs, scope) {
          const scopeData = scope.data;
          for (let key in declFuncs) {
            const value = declFuncs[key];
            scopeData[key] = value ? value() : value;
          }
          for (let key in declVars) {
            if (!(key in scopeData)) {
              scopeData[key] = void 0;
            }
          }
        }
        getScopeValue(name, startScope) {
          const scope = this.getScopeFromName(name, startScope);
          return scope.data[name];
        }
        getScopeDataFromName(name, startScope) {
          return this.getScopeFromName(name, startScope).data;
        }
        getScopeFromName(name, startScope, constInit = true) {
          let scope = startScope;
          do {
            if (scope.type == "block") {
              if (!scope.lexDeclared[name]) {
                if (name in scope.data) {
                  return scope;
                }
              } else {
                if (scope.lexDeclared[name].init === false) {
                  if (constInit && scope.lexDeclared[name].kind == "const") {
                    return scope;
                  }
                  throw this.createInternalThrowError(Messages.LetVariableUseBeforeInitReferenceError, name);
                } else if (scope.lexDeclared[name].init === true) {
                  return scope;
                }
              }
            } else {
              if (scope.lexDeclared && scope.lexDeclared[name] && scope.lexDeclared[name].init === false) {
                throw this.createInternalThrowError(Messages.LetVariableUseBeforeInitReferenceError, name);
              }
              if (name in scope.data) {
                return scope;
              }
            }
          } while (scope = scope.parent);
          return this.globalScope;
        }
        entryBlockScope(newScope) {
          const prevScope = this.getCurrentScope();
          this.setCurrentScope(newScope);
          return prevScope;
        }
        setValue(value) {
          const isFunctionCall = this.callStack.length;
          if (this.isVarDeclMode || isFunctionCall || value === EmptyStatementReturn || value === Break || value === Continue || value instanceof BreakLabel || value instanceof ContinueLabel) {
            return value;
          }
          this.value = value instanceof Return ? value.value : value;
          return value;
        }
        getValue() {
          if (this.value === globalOrWindow)
            return;
          return this.value;
        }
      };
      Interpreter.eval = internalEval;
      Interpreter.Function = internalFunction;
      Interpreter.ecmaVersion = "latest";
      Interpreter.globalContextInFunction = void 0;
      Interpreter.global = Object.create(null);
      module.exports = {
        Interpreter
      };
    }
  });

  // index.js
  var require_estreval = __commonJS({
    "index.js"(exports, module) {
      var parse = require_jsx();
      var { Interpreter } = require_interpreter();
      var interpreter = new Interpreter(false);
      function estreval(code, context = {}, options = {}) {
        if (!options.parse)
          options.parse = parse;
        interpreter.reset(context, options);
        return interpreter.evaluate(code);
      }
      Object.assign(estreval, {
        interpreter,
        parse,
        evaluate: estreval
      });
      module.exports = estreval;
    }
  });
  return require_estreval();
})();
//# sourceMappingURL=estreval.min.js.map
